
Caterina.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  00007e7c  00000f10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e7c  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008001be  008001be  00000fce  2**0
                  ALLOC
  3 .comment      00000024  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ff4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00001038  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005bc4  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c4d  00000000  00000000  00006ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006d70  00000000  00000000  00008b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006fc  00000000  00000000  0000f884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021b6  00000000  00000000  0000ff80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003813  00000000  00000000  00012136  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  00015949  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line_str 00000053  00000000  00000000  00015d81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
    7002:	00 00       	nop
    7004:	6e c0       	rjmp	.+220    	; 0x70e2 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	6c c0       	rjmp	.+216    	; 0x70e2 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	6a c0       	rjmp	.+212    	; 0x70e2 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	68 c0       	rjmp	.+208    	; 0x70e2 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	66 c0       	rjmp	.+204    	; 0x70e2 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	64 c0       	rjmp	.+200    	; 0x70e2 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	62 c0       	rjmp	.+196    	; 0x70e2 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	60 c0       	rjmp	.+192    	; 0x70e2 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	5e c0       	rjmp	.+188    	; 0x70e2 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	8f c4       	rjmp	.+2334   	; 0x7948 <__vector_10>
    702a:	00 00       	nop
    702c:	5a c0       	rjmp	.+180    	; 0x70e2 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	58 c0       	rjmp	.+176    	; 0x70e2 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	56 c0       	rjmp	.+172    	; 0x70e2 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	54 c0       	rjmp	.+168    	; 0x70e2 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	52 c0       	rjmp	.+164    	; 0x70e2 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	50 c0       	rjmp	.+160    	; 0x70e2 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	dc c0       	rjmp	.+440    	; 0x71fe <__vector_17>
    7046:	00 00       	nop
    7048:	4c c0       	rjmp	.+152    	; 0x70e2 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	4a c0       	rjmp	.+148    	; 0x70e2 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	48 c0       	rjmp	.+144    	; 0x70e2 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	46 c0       	rjmp	.+140    	; 0x70e2 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	44 c0       	rjmp	.+136    	; 0x70e2 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	42 c0       	rjmp	.+132    	; 0x70e2 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	40 c0       	rjmp	.+128    	; 0x70e2 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	3e c0       	rjmp	.+124    	; 0x70e2 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	3c c0       	rjmp	.+120    	; 0x70e2 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	3a c0       	rjmp	.+116    	; 0x70e2 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	38 c0       	rjmp	.+112    	; 0x70e2 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	36 c0       	rjmp	.+108    	; 0x70e2 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	34 c0       	rjmp	.+104    	; 0x70e2 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	32 c0       	rjmp	.+100    	; 0x70e2 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	30 c0       	rjmp	.+96     	; 0x70e2 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	2e c0       	rjmp	.+92     	; 0x70e2 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	2c c0       	rjmp	.+88     	; 0x70e2 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	2a c0       	rjmp	.+84     	; 0x70e2 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	28 c0       	rjmp	.+80     	; 0x70e2 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	26 c0       	rjmp	.+76     	; 0x70e2 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	24 c0       	rjmp	.+72     	; 0x70e2 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	22 c0       	rjmp	.+68     	; 0x70e2 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	20 c0       	rjmp	.+64     	; 0x70e2 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	1e c0       	rjmp	.+60     	; 0x70e2 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	1c c0       	rjmp	.+56     	; 0x70e2 <__bad_interrupt>
    70aa:	00 00       	nop

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <__do_copy_data>:
    70b8:	11 e0       	ldi	r17, 0x01	; 1

000070ba <.Loc.1>:
    70ba:	a0 e0       	ldi	r26, 0x00	; 0

000070bc <.Loc.2>:
    70bc:	b1 e0       	ldi	r27, 0x01	; 1

000070be <.Loc.3>:
    70be:	ec e7       	ldi	r30, 0x7C	; 124

000070c0 <.Loc.4>:
    70c0:	fe e7       	ldi	r31, 0x7E	; 126

000070c2 <.Loc.5>:
    70c2:	02 c0       	rjmp	.+4      	; 0x70c8 <.L__do_copy_data_start>

000070c4 <.L__do_copy_data_loop>:
    70c4:	05 90       	lpm	r0, Z+

000070c6 <.Loc.7>:
    70c6:	0d 92       	st	X+, r0

000070c8 <.L__do_copy_data_start>:
    70c8:	ae 3b       	cpi	r26, 0xBE	; 190

000070ca <.Loc.9>:
    70ca:	b1 07       	cpc	r27, r17

000070cc <.Loc.10>:
    70cc:	d9 f7       	brne	.-10     	; 0x70c4 <.L__do_copy_data_loop>

000070ce <__do_clear_bss>:
    70ce:	21 e0       	ldi	r18, 0x01	; 1

000070d0 <.Loc.1>:
    70d0:	ae eb       	ldi	r26, 0xBE	; 190

000070d2 <.Loc.2>:
    70d2:	b1 e0       	ldi	r27, 0x01	; 1

000070d4 <.Loc.3>:
    70d4:	01 c0       	rjmp	.+2      	; 0x70d8 <.Loc.5>

000070d6 <.Loc.4>:
    70d6:	1d 92       	st	X+, r1

000070d8 <.Loc.5>:
    70d8:	a4 3d       	cpi	r26, 0xD4	; 212

000070da <.Loc.6>:
    70da:	b2 07       	cpc	r27, r18

000070dc <.Loc.7>:
    70dc:	e1 f7       	brne	.-8      	; 0x70d6 <.Loc.4>

000070de <L0>:
    70de:	2e d3       	rcall	.+1628   	; 0x773c <main>
    70e0:	8d c6       	rjmp	.+3354   	; 0x7dfc <_exit>

000070e2 <__bad_interrupt>:
    70e2:	8e cf       	rjmp	.-228    	; 0x7000 <__vectors>

000070e4 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    70e4:	84 e0       	ldi	r24, 0x04	; 4
    70e6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

000070ea <.L2>:
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    70ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000070ee <.LBE86>:
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    70ee:	85 ff       	sbrs	r24, 5
    70f0:	03 c0       	rjmp	.+6      	; 0x70f8 <.L6>

000070f2 <.LBB88>:
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    70f2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

000070f6 <.LBE88>:
			  return 0;
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
    70f6:	0c c0       	rjmp	.+24     	; 0x7110 <.L1>

000070f8 <.L6>:
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    70f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    70fc:	8b 77       	andi	r24, 0x7B	; 123
    70fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00007102 <.L3>:
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7102:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00007106 <.LBE92>:
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    7106:	82 fd       	sbrc	r24, 2
    7108:	f0 cf       	rjmp	.-32     	; 0x70ea <.L2>

0000710a <.Loc.25>:
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    710a:	8e b3       	in	r24, 0x1e	; 30

0000710c <.Loc.27>:
    710c:	81 11       	cpse	r24, r1
    710e:	f9 cf       	rjmp	.-14     	; 0x7102 <.L3>

00007110 <.L1>:
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
    7110:	08 95       	ret

00007112 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7112:	93 e0       	ldi	r25, 0x03	; 3
    7114:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00007118 <.LBB96>:
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7118:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

0000711c <.LBE96>:
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPNUM);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    711c:	95 ff       	sbrs	r25, 5
    711e:	0a c0       	rjmp	.+20     	; 0x7134 <.L11>

00007120 <.L14>:
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7120:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

00007124 <.LBE98>:
	}

	/* Write the next byte to the IN endpoint */
	Endpoint_Write_8(Response);
	
	TX_LED_ON();
    7124:	5d 98       	cbi	0x0b, 5	; 11

00007126 <.Loc.46>:
	TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    7126:	84 e6       	ldi	r24, 0x64	; 100
    7128:	90 e0       	ldi	r25, 0x00	; 0

0000712a <.LVL6>:
    712a:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <TxLEDPulse+0x1>
    712e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <TxLEDPulse>

00007132 <.LVL7>:
    7132:	08 95       	ret

00007134 <.L11>:
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7134:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7138:	9e 77       	andi	r25, 0x7E	; 126
    713a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

0000713e <.L13>:
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    713e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00007142 <.LBE102>:
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    7142:	90 fd       	sbrc	r25, 0
    7144:	ed cf       	rjmp	.-38     	; 0x7120 <.L14>

00007146 <.Loc.59>:
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7146:	9e b3       	in	r25, 0x1e	; 30

00007148 <.Loc.61>:
    7148:	91 11       	cpse	r25, r1
    714a:	f9 cf       	rjmp	.-14     	; 0x713e <.L13>

0000714c <.Loc.62>:
	/* Write the next byte to the IN endpoint */
	Endpoint_Write_8(Response);
	
	TX_LED_ON();
	TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
}
    714c:	08 95       	ret

0000714e <StartSketch>:
uint16_t bootKey = 0x7777;
volatile uint16_t *const bootKeyPtr = (volatile uint16_t *)0x0800;

void StartSketch(void)
{
	cli();
    714e:	f8 94       	cli

00007150 <.Loc.65>:
	
	/* Undo TIMER1 setup and clear the count before running the sketch */
	TIMSK1 = 0;
    7150:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

00007154 <.Loc.67>:
	TCCR1B = 0;
    7154:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

00007158 <.Loc.69>:
	TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
    7158:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

0000715c <.Loc.71>:
	TCNT1L = 0;
    715c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

00007160 <.Loc.73>:
	
	/* Relocate the interrupt vector table to the application section */
	MCUCR = (1 << IVCE);
    7160:	81 e0       	ldi	r24, 0x01	; 1
    7162:	85 bf       	out	0x35, r24	; 53

00007164 <.Loc.75>:
	MCUCR = 0;
    7164:	15 be       	out	0x35, r1	; 53

00007166 <.Loc.77>:

	L_LED_OFF();
    7166:	47 98       	cbi	0x08, 7	; 8

00007168 <.Loc.78>:
	TX_LED_OFF();
    7168:	5d 9a       	sbi	0x0b, 5	; 11

0000716a <.Loc.79>:
	RX_LED_OFF();
    716a:	28 9a       	sbi	0x05, 0	; 5

0000716c <.Loc.80>:

	/* jump to beginning of application space */
	__asm__ volatile("jmp 0x0000");
    716c:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00007170 <.Loc.81>:
}
    7170:	08 95       	ret

00007172 <LEDPulse>:

/*	Breathing animation on L LED indicates bootloader is running */
uint16_t LLEDPulse;
void LEDPulse(void)
{
	LLEDPulse++;
    7172:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <__data_end>
    7176:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <__data_end+0x1>
    717a:	2f 5f       	subi	r18, 0xFF	; 255
    717c:	3f 4f       	sbci	r19, 0xFF	; 255
    717e:	30 93 bf 01 	sts	0x01BF, r19	; 0x8001bf <__data_end+0x1>
    7182:	20 93 be 01 	sts	0x01BE, r18	; 0x8001be <__data_end>

00007186 <.Loc.85>:
	uint8_t p = LLEDPulse >> 8;
    7186:	83 2f       	mov	r24, r19

00007188 <.LVL9>:
	if (p > 127)
    7188:	37 ff       	sbrs	r19, 7
    718a:	02 c0       	rjmp	.+4      	; 0x7190 <.L22>

0000718c <.Loc.89>:
		p = 254-p;
    718c:	8e ef       	ldi	r24, 0xFE	; 254
    718e:	83 1b       	sub	r24, r19

00007190 <.L22>:
	p += p;
    7190:	88 0f       	add	r24, r24

00007192 <.LVL11>:
	if (((uint8_t)LLEDPulse) > p)
    7192:	82 17       	cp	r24, r18
    7194:	10 f4       	brcc	.+4      	; 0x719a <.L23>

00007196 <.Loc.95>:
		L_LED_OFF();
    7196:	47 98       	cbi	0x08, 7	; 8
    7198:	08 95       	ret

0000719a <.L23>:
	else
		L_LED_ON();
    719a:	47 9a       	sbi	0x08, 7	; 8

0000719c <.Loc.97>:
}
    719c:	08 95       	ret

0000719e <SetupHardware>:

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    719e:	84 b7       	in	r24, 0x34	; 52
    71a0:	87 7f       	andi	r24, 0xF7	; 247
    71a2:	84 bf       	out	0x34, r24	; 52

000071a4 <.LBB104>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    71a4:	0f b6       	in	r0, 0x3f	; 63
    71a6:	f8 94       	cli
    71a8:	a8 95       	wdr
    71aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    71ae:	88 61       	ori	r24, 0x18	; 24
    71b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    71b4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    71b8:	0f be       	out	0x3f, r0	; 63

000071ba <.LBB106>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    71ba:	90 e8       	ldi	r25, 0x80	; 128
    71bc:	80 e0       	ldi	r24, 0x00	; 0
    71be:	0f b6       	in	r0, 0x3f	; 63
    71c0:	f8 94       	cli
    71c2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    71c6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    71ca:	0f be       	out	0x3f, r0	; 63

000071cc <.LBE106>:

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    71cc:	81 e0       	ldi	r24, 0x01	; 1
    71ce:	85 bf       	out	0x35, r24	; 53

000071d0 <.Loc.113>:
	MCUCR = (1 << IVSEL);
    71d0:	82 e0       	ldi	r24, 0x02	; 2
    71d2:	85 bf       	out	0x35, r24	; 53

000071d4 <.Loc.115>:
	
	LED_SETUP();
    71d4:	3f 9a       	sbi	0x07, 7	; 7

000071d6 <.Loc.116>:
    71d6:	20 9a       	sbi	0x04, 0	; 4

000071d8 <.Loc.117>:
    71d8:	55 9a       	sbi	0x0a, 5	; 10

000071da <.Loc.118>:
	CPU_PRESCALE(0); 
    71da:	e1 e6       	ldi	r30, 0x61	; 97
    71dc:	f0 e0       	ldi	r31, 0x00	; 0
    71de:	90 83       	st	Z, r25
    71e0:	10 82       	st	Z, r1

000071e2 <.Loc.120>:
	L_LED_OFF();
    71e2:	47 98       	cbi	0x08, 7	; 8

000071e4 <.Loc.121>:
	TX_LED_OFF();
    71e4:	5d 9a       	sbi	0x0b, 5	; 11

000071e6 <.Loc.122>:
	RX_LED_OFF();
    71e6:	28 9a       	sbi	0x05, 0	; 5

000071e8 <.Loc.123>:
	 * With 16 MHz clock and 1/64 prescaler, timer 1 is clocked at 250 kHz
	 * Our chosen compare match generates an interrupt every 1 ms.
	 * This interrupt is disabled selectively when doing memory reading, erasing,
	 * or writing since SPM has tight timing requirements.
	 */ 
	OCR1AH = 0;
    71e8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>

000071ec <.Loc.125>:
	OCR1AL = 250;
    71ec:	9a ef       	ldi	r25, 0xFA	; 250
    71ee:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

000071f2 <.Loc.127>:
	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
    71f2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

000071f6 <.Loc.129>:
	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
    71f6:	83 e0       	ldi	r24, 0x03	; 3
    71f8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

000071fc <.Loc.131>:

	/* Initialize USB Subsystem */
	USB_Init();
    71fc:	8d c3       	rjmp	.+1818   	; 0x7918 <USB_Init>

000071fe <__vector_17>:
}

//uint16_t ctr = 0;
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    71fe:	1f 92       	push	r1
    7200:	1f b6       	in	r1, 0x3f	; 63
    7202:	1f 92       	push	r1
    7204:	11 24       	eor	r1, r1
    7206:	2f 93       	push	r18
    7208:	8f 93       	push	r24

0000720a <.LCFI0>:
    720a:	9f 93       	push	r25

0000720c <.LCFI1>:
    720c:	ef 93       	push	r30

0000720e <.LCFI2>:
    720e:	ff 93       	push	r31

00007210 <.LCFI3>:
	/* Reset counter */
	TCNT1H = 0;
    7210:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

00007214 <.Loc.135>:
	TCNT1L = 0;
    7214:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

00007218 <.Loc.137>:

	/* Check whether the TX or RX LED one-shot period has elapsed.  if so, turn off the LED */
	if (TxLEDPulse && !(--TxLEDPulse))
    7218:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <TxLEDPulse>
    721c:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <TxLEDPulse+0x1>

00007220 <.Loc.139>:
    7220:	00 97       	sbiw	r24, 0x00	; 0
    7222:	41 f0       	breq	.+16     	; 0x7234 <.L28>

00007224 <.Loc.140>:
    7224:	01 97       	sbiw	r24, 0x01	; 1

00007226 <.Loc.141>:
    7226:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <TxLEDPulse+0x1>
    722a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <TxLEDPulse>
    722e:	89 2b       	or	r24, r25
    7230:	09 f4       	brne	.+2      	; 0x7234 <.L28>

00007232 <.Loc.142>:
		TX_LED_OFF();
    7232:	5d 9a       	sbi	0x0b, 5	; 11

00007234 <.L28>:
	if (RxLEDPulse && !(--RxLEDPulse))
    7234:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <RxLEDPulse>
    7238:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <RxLEDPulse+0x1>

0000723c <.Loc.145>:
    723c:	00 97       	sbiw	r24, 0x00	; 0
    723e:	41 f0       	breq	.+16     	; 0x7250 <.L31>

00007240 <.Loc.146>:
    7240:	01 97       	sbiw	r24, 0x01	; 1

00007242 <.Loc.147>:
    7242:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <RxLEDPulse+0x1>
    7246:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <RxLEDPulse>
    724a:	89 2b       	or	r24, r25
    724c:	09 f4       	brne	.+2      	; 0x7250 <.L31>

0000724e <.Loc.148>:
		RX_LED_OFF();
    724e:	28 9a       	sbi	0x05, 0	; 5

00007250 <.L31>:
	
	if (pgm_read_word(0) != 0xFFFF)
    7250:	e0 e0       	ldi	r30, 0x00	; 0
    7252:	f0 e0       	ldi	r31, 0x00	; 0
    7254:	85 91       	lpm	r24, Z+
    7256:	94 91       	lpm	r25, Z

00007258 <.LBE108>:
    7258:	01 96       	adiw	r24, 0x01	; 1
    725a:	49 f0       	breq	.+18     	; 0x726e <.L26>

0000725c <.Loc.155>:
		Timeout++;
    725c:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <Timeout>
    7260:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <Timeout+0x1>

00007264 <.LVL17>:
    7264:	01 96       	adiw	r24, 0x01	; 1
    7266:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <Timeout+0x1>
    726a:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <Timeout>

0000726e <.L26>:
}
    726e:	ff 91       	pop	r31
    7270:	ef 91       	pop	r30
    7272:	9f 91       	pop	r25
    7274:	8f 91       	pop	r24
    7276:	2f 91       	pop	r18
    7278:	1f 90       	pop	r1
    727a:	1f be       	out	0x3f, r1	; 63
    727c:	1f 90       	pop	r1
    727e:	18 95       	reti

00007280 <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7280:	42 e0       	ldi	r20, 0x02	; 2
    7282:	61 ec       	ldi	r22, 0xC1	; 193
    7284:	82 e0       	ldi	r24, 0x02	; 2
    7286:	dd d2       	rcall	.+1466   	; 0x7842 <Endpoint_ConfigureEndpoint_Prv>

00007288 <.LBB111>:
    7288:	42 e1       	ldi	r20, 0x12	; 18
    728a:	61 e8       	ldi	r22, 0x81	; 129
    728c:	83 e0       	ldi	r24, 0x03	; 3
    728e:	d9 d2       	rcall	.+1458   	; 0x7842 <Endpoint_ConfigureEndpoint_Prv>

00007290 <.LBB113>:
    7290:	42 e1       	ldi	r20, 0x12	; 18
    7292:	60 e8       	ldi	r22, 0x80	; 128
    7294:	84 e0       	ldi	r24, 0x04	; 4
    7296:	d5 c2       	rjmp	.+1450   	; 0x7842 <Endpoint_ConfigureEndpoint_Prv>

00007298 <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    7298:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <USB_ControlRequest>

0000729c <.Loc.168>:
    729c:	98 2f       	mov	r25, r24
    729e:	9f 77       	andi	r25, 0x7F	; 127
    72a0:	91 32       	cpi	r25, 0x21	; 33
    72a2:	b9 f4       	brne	.+46     	; 0x72d2 <.L38>

000072a4 <.Loc.169>:
	{
		return;
	}

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
    72a4:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <USB_ControlRequest+0x1>

000072a8 <.Loc.171>:
    72a8:	90 32       	cpi	r25, 0x20	; 32
    72aa:	a1 f0       	breq	.+40     	; 0x72d4 <.L40>
    72ac:	91 32       	cpi	r25, 0x21	; 33
    72ae:	89 f4       	brne	.+34     	; 0x72d2 <.L38>

000072b0 <.Loc.172>:
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    72b0:	81 3a       	cpi	r24, 0xA1	; 161
    72b2:	79 f4       	brne	.+30     	; 0x72d2 <.L38>

000072b4 <.LBB115>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    72b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    72b8:	87 7f       	andi	r24, 0xF7	; 247
    72ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000072be <.LBE115>:
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    72be:	67 e0       	ldi	r22, 0x07	; 7
    72c0:	70 e0       	ldi	r23, 0x00	; 0
    72c2:	83 e0       	ldi	r24, 0x03	; 3
    72c4:	91 e0       	ldi	r25, 0x01	; 1
    72c6:	f1 d3       	rcall	.+2018   	; 0x7aaa <Endpoint_Write_Control_Stream_LE>

000072c8 <.LBB117>:
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    72c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    72cc:	8b 77       	andi	r24, 0x7B	; 123

000072ce <.L41>:
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    72ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000072d2 <.L38>:
				Endpoint_ClearIN();
			}

			break;
	}
}
    72d2:	08 95       	ret

000072d4 <.L40>:
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    72d4:	81 32       	cpi	r24, 0x21	; 33
    72d6:	e9 f7       	brne	.-6      	; 0x72d2 <.L38>

000072d8 <.LBB122>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    72d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    72dc:	87 7f       	andi	r24, 0xF7	; 247
    72de:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000072e2 <.LBE122>:
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    72e2:	67 e0       	ldi	r22, 0x07	; 7
    72e4:	70 e0       	ldi	r23, 0x00	; 0
    72e6:	83 e0       	ldi	r24, 0x03	; 3
    72e8:	91 e0       	ldi	r25, 0x01	; 1
    72ea:	33 d4       	rcall	.+2150   	; 0x7b52 <Endpoint_Read_Control_Stream_LE>

000072ec <.LBB124>:
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    72ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    72f0:	8e 77       	andi	r24, 0x7E	; 126
    72f2:	ed cf       	rjmp	.-38     	; 0x72ce <.L41>

000072f4 <CDC_Task>:

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
    72f4:	7f 92       	push	r7

000072f6 <.LCFI4>:
    72f6:	8f 92       	push	r8

000072f8 <.LCFI5>:
    72f8:	9f 92       	push	r9

000072fa <.LCFI6>:
    72fa:	af 92       	push	r10

000072fc <.LCFI7>:
    72fc:	bf 92       	push	r11

000072fe <.LCFI8>:
    72fe:	cf 92       	push	r12

00007300 <.LCFI9>:
    7300:	df 92       	push	r13

00007302 <.LCFI10>:
    7302:	ef 92       	push	r14

00007304 <.LCFI11>:
    7304:	ff 92       	push	r15

00007306 <.LCFI12>:
    7306:	0f 93       	push	r16

00007308 <.LCFI13>:
    7308:	1f 93       	push	r17

0000730a <.LCFI14>:
    730a:	cf 93       	push	r28

0000730c <.LCFI15>:
    730c:	df 93       	push	r29

0000730e <.LBB157>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    730e:	84 e0       	ldi	r24, 0x04	; 4
    7310:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

00007314 <.LBB159>:
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7314:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00007318 <.LBE159>:
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
    7318:	82 ff       	sbrs	r24, 2
    731a:	02 c2       	rjmp	.+1028   	; 0x7720 <.L42>

0000731c <.Loc.207>:
	  return;
	  
	RX_LED_ON();
    731c:	28 98       	cbi	0x05, 0	; 5

0000731e <.Loc.208>:
	RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    731e:	84 e6       	ldi	r24, 0x64	; 100
    7320:	90 e0       	ldi	r25, 0x00	; 0
    7322:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <RxLEDPulse+0x1>
    7326:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <RxLEDPulse>

0000732a <.Loc.210>:

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
    732a:	dc de       	rcall	.-584    	; 0x70e4 <FetchNextCommandByte>

0000732c <.LVL26>:
    732c:	08 2f       	mov	r16, r24

0000732e <.LVL27>:

	if (Command == 'E')
    732e:	85 34       	cpi	r24, 0x45	; 69
    7330:	91 f4       	brne	.+36     	; 0x7356 <.L45>

00007332 <.Loc.214>:
	{
		/* We nearly run out the bootloader timeout clock, 
		* leaving just a few hundred milliseconds so the 
		* bootloder has time to respond and service any 
		* subsequent requests */
		Timeout = TIMEOUT_PERIOD - 500;
    7332:	8c e4       	ldi	r24, 0x4C	; 76
    7334:	9d e1       	ldi	r25, 0x1D	; 29
    7336:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <Timeout+0x1>
    733a:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <Timeout>

0000733e <.L46>:
	
		/* Re-enable RWW section - must be done here in case 
		 * user has disabled verification on upload.  */
		boot_rww_enable_safe();		
    733e:	07 b6       	in	r0, 0x37	; 55
    7340:	00 fc       	sbrc	r0, 0
    7342:	fd cf       	rjmp	.-6      	; 0x733e <.L46>

00007344 <.L47>:
    7344:	f9 99       	sbic	0x1f, 1	; 31
    7346:	fe cf       	rjmp	.-4      	; 0x7344 <.L47>

00007348 <.Loc.223>:
    7348:	81 e1       	ldi	r24, 0x11	; 17
    734a:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    734e:	e8 95       	spm

00007350 <.L130>:
	else if (Command == 'T')
	{
		FetchNextCommandByte();

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
    7350:	8d e0       	ldi	r24, 0x0D	; 13

00007352 <.L129>:
	}
	#endif
	else if (Command != 27)
	{
		// Unknown (non-sync) command, return fail code 
		WriteNextResponseByte('?');
    7352:	df de       	rcall	.-578    	; 0x7112 <WriteNextResponseByte>

00007354 <.LVL28>:
    7354:	38 c0       	rjmp	.+112    	; 0x73c6 <.L48>

00007356 <.L45>:
		boot_rww_enable_safe();		

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'T')
    7356:	8b 31       	cpi	r24, 0x1B	; 27
    7358:	b1 f1       	breq	.+108    	; 0x73c6 <.L48>
    735a:	ef eb       	ldi	r30, 0xBF	; 191
    735c:	e8 0f       	add	r30, r24
    735e:	e4 33       	cpi	r30, 0x34	; 52
    7360:	08 f0       	brcs	.+2      	; 0x7364 <L0+0x2>

00007362 <L0>:
    7362:	92 c0       	rjmp	.+292    	; 0x7488 <.L49>
    7364:	f0 e0       	ldi	r31, 0x00	; 0
    7366:	e0 50       	subi	r30, 0x00	; 0
    7368:	f1 4c       	sbci	r31, 0xC1	; 193
    736a:	2c c5       	rjmp	.+2648   	; 0x7dc4 <__tablejump2__>

0000736c <.L63>:
	{
		FetchNextCommandByte();
    736c:	bb de       	rcall	.-650    	; 0x70e4 <FetchNextCommandByte>

0000736e <.LVL29>:
    736e:	f0 cf       	rjmp	.-32     	; 0x7350 <.L130>

00007370 <.L50>:
		WriteNextResponseByte('\r');
	}
	else if (Command == 't')
	{
		// Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader 
		WriteNextResponseByte(0x44);
    7370:	84 e4       	ldi	r24, 0x44	; 68
    7372:	cf de       	rcall	.-610    	; 0x7112 <WriteNextResponseByte>

00007374 <.LVL30>:
		WriteNextResponseByte(0x00);
    7374:	80 e0       	ldi	r24, 0x00	; 0
    7376:	ed cf       	rjmp	.-38     	; 0x7352 <.L129>

00007378 <.L61>:
	}
	else if (Command == 'a')
	{
		// Indicate auto-address increment is supported 
		WriteNextResponseByte('Y');
    7378:	89 e5       	ldi	r24, 0x59	; 89
    737a:	eb cf       	rjmp	.-42     	; 0x7352 <.L129>

0000737c <.L72>:
	}
	else if (Command == 'A')
	{
		// Set the current address to that given by the host 
		CurrAddress   = (FetchNextCommandByte() << 9);
    737c:	b3 de       	rcall	.-666    	; 0x70e4 <FetchNextCommandByte>

0000737e <.LVL31>:
    737e:	c8 2f       	mov	r28, r24

00007380 <.Loc.235>:
		CurrAddress  |= (FetchNextCommandByte() << 1);
    7380:	b1 de       	rcall	.-670    	; 0x70e4 <FetchNextCommandByte>

00007382 <.LVL32>:
		WriteNextResponseByte('Y');
	}
	else if (Command == 'A')
	{
		// Set the current address to that given by the host 
		CurrAddress   = (FetchNextCommandByte() << 9);
    7382:	2c 2f       	mov	r18, r28
    7384:	30 e0       	ldi	r19, 0x00	; 0

00007386 <.Loc.238>:
    7386:	32 2f       	mov	r19, r18
    7388:	22 27       	eor	r18, r18
    738a:	33 0f       	add	r19, r19

0000738c <.Loc.239>:
		CurrAddress  |= (FetchNextCommandByte() << 1);
    738c:	90 e0       	ldi	r25, 0x00	; 0

0000738e <.Loc.240>:
    738e:	88 0f       	add	r24, r24
    7390:	99 1f       	adc	r25, r25

00007392 <.Loc.241>:
    7392:	82 2b       	or	r24, r18
    7394:	93 2b       	or	r25, r19
    7396:	09 2e       	mov	r0, r25
    7398:	00 0c       	add	r0, r0
    739a:	aa 0b       	sbc	r26, r26
    739c:	bb 0b       	sbc	r27, r27

0000739e <.L132>:
	{
		// Read the byte from the endpoint and write it to the EEPROM 
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());

		// Increment the address after use
		CurrAddress += 2;
    739e:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <CurrAddress>
    73a2:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <CurrAddress+0x1>
    73a6:	a0 93 c8 01 	sts	0x01C8, r26	; 0x8001c8 <CurrAddress+0x2>
    73aa:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <CurrAddress+0x3>

000073ae <.Loc.243>:

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
    73ae:	d0 cf       	rjmp	.-96     	; 0x7350 <.L130>

000073b0 <.L54>:
		WriteNextResponseByte('\r');
	}
	else if (Command == 'p')
	{
		// Indicate serial programmer back to the host 
		WriteNextResponseByte('S');
    73b0:	83 e5       	ldi	r24, 0x53	; 83
    73b2:	cf cf       	rjmp	.-98     	; 0x7352 <.L129>

000073b4 <.L64>:
    73b4:	c4 eb       	ldi	r28, 0xB4	; 180
    73b6:	d1 e0       	ldi	r29, 0x01	; 1
    73b8:	0b eb       	ldi	r16, 0xBB	; 187
    73ba:	11 e0       	ldi	r17, 0x01	; 1

000073bc <.L73>:
	}
	else if (Command == 'S')
	{
		// Write the 7-byte software identifier to the endpoint 
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    73bc:	89 91       	ld	r24, Y+

000073be <.LVL34>:
    73be:	a9 de       	rcall	.-686    	; 0x7112 <WriteNextResponseByte>

000073c0 <.LVL35>:
		WriteNextResponseByte('S');
	}
	else if (Command == 'S')
	{
		// Write the 7-byte software identifier to the endpoint 
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    73c0:	0c 17       	cp	r16, r28
    73c2:	1d 07       	cpc	r17, r29
    73c4:	d9 f7       	brne	.-10     	; 0x73bc <.L73>

000073c6 <.L48>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    73c6:	83 e0       	ldi	r24, 0x03	; 3
    73c8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

000073cc <.LBB164>:
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    73cc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000073d0 <.LBB166>:
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    73d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    73d4:	8e 77       	andi	r24, 0x7E	; 126
    73d6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000073da <.LBE166>:

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
    73da:	95 ff       	sbrs	r25, 5
    73dc:	94 c1       	rjmp	.+808    	; 0x7706 <.L97>

000073de <.L101>:
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    73de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000073e2 <.LBE168>:

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
    73e2:	80 ff       	sbrs	r24, 0
    73e4:	9a c1       	rjmp	.+820    	; 0x771a <.L102>

000073e6 <.LBB170>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    73e6:	84 e0       	ldi	r24, 0x04	; 4
    73e8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

000073ec <.LBB172>:
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    73ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    73f0:	8b 77       	andi	r24, 0x7B	; 123
    73f2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

000073f6 <.Loc.281>:
				#else
					UEINTX &= ~(1 << RXOUTI);
				#endif
			}
    73f6:	94 c1       	rjmp	.+808    	; 0x7720 <.L42>

000073f8 <.L62>:
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == 'V')
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    73f8:	81 e3       	ldi	r24, 0x31	; 49
    73fa:	8b de       	rcall	.-746    	; 0x7112 <WriteNextResponseByte>

000073fc <.LVL42>:
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    73fc:	80 e3       	ldi	r24, 0x30	; 48
    73fe:	a9 cf       	rjmp	.-174    	; 0x7352 <.L129>

00007400 <.L52>:
	}
	else if (Command == 's')
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
    7400:	87 e8       	ldi	r24, 0x87	; 135
    7402:	87 de       	rcall	.-754    	; 0x7112 <WriteNextResponseByte>

00007404 <.LVL43>:
		WriteNextResponseByte(AVR_SIGNATURE_2);
    7404:	85 e9       	ldi	r24, 0x95	; 149
    7406:	85 de       	rcall	.-758    	; 0x7112 <WriteNextResponseByte>

00007408 <.LVL44>:
		WriteNextResponseByte(AVR_SIGNATURE_1);
    7408:	8e e1       	ldi	r24, 0x1E	; 30
    740a:	a3 cf       	rjmp	.-186    	; 0x7352 <.L129>

0000740c <.L103>:
	RxLEDPulse = TX_RX_LED_PULSE_PERIOD;

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();

	if (Command == 'E')
    740c:	e0 e0       	ldi	r30, 0x00	; 0
    740e:	f0 e0       	ldi	r31, 0x00	; 0

00007410 <.LBB174>:
	else if (Command == 'e')
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    7410:	83 e0       	ldi	r24, 0x03	; 3

00007412 <.Loc.290>:
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
    7412:	95 e0       	ldi	r25, 0x05	; 5

00007414 <.L57>:
	else if (Command == 'e')
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    7414:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7418:	e8 95       	spm

0000741a <.L74>:
			boot_spm_busy_wait();
    741a:	07 b6       	in	r0, 0x37	; 55
    741c:	00 fc       	sbrc	r0, 0
    741e:	fd cf       	rjmp	.-6      	; 0x741a <.L74>

00007420 <.Loc.295>:
			boot_page_write(CurrFlashAddress);
    7420:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7424:	e8 95       	spm

00007426 <.L75>:
			boot_spm_busy_wait();
    7426:	07 b6       	in	r0, 0x37	; 55
    7428:	00 fc       	sbrc	r0, 0
    742a:	fd cf       	rjmp	.-6      	; 0x7426 <.L75>

0000742c <.Loc.299>:
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == 'e')
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    742c:	e0 58       	subi	r30, 0x80	; 128
    742e:	ff 4f       	sbci	r31, 0xFF	; 255
    7430:	e1 15       	cp	r30, r1
    7432:	20 e7       	ldi	r18, 0x70	; 112
    7434:	f2 07       	cpc	r31, r18
    7436:	71 f7       	brne	.-36     	; 0x7414 <.L57>
    7438:	8b cf       	rjmp	.-234    	; 0x7350 <.L130>

0000743a <.L53>:
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == 'r')
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    743a:	89 e0       	ldi	r24, 0x09	; 9
    743c:	e1 e0       	ldi	r30, 0x01	; 1
    743e:	f0 e0       	ldi	r31, 0x00	; 0

00007440 <.L131>:
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
	}
	else if (Command == 'Q')
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    7440:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7444:	84 91       	lpm	r24, Z

00007446 <.LVL45>:
    7446:	85 cf       	rjmp	.-246    	; 0x7352 <.L129>

00007448 <.L69>:
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
	}
	else if (Command == 'F')
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    7448:	89 e0       	ldi	r24, 0x09	; 9
    744a:	e0 e0       	ldi	r30, 0x00	; 0
    744c:	f0 e0       	ldi	r31, 0x00	; 0
    744e:	f8 cf       	rjmp	.-16     	; 0x7440 <.L131>

00007450 <.L68>:
	}
	else if (Command == 'N')
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    7450:	89 e0       	ldi	r24, 0x09	; 9
    7452:	e3 e0       	ldi	r30, 0x03	; 3
    7454:	f0 e0       	ldi	r31, 0x00	; 0
    7456:	f4 cf       	rjmp	.-24     	; 0x7440 <.L131>

00007458 <.L66>:
	}
	else if (Command == 'Q')
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    7458:	89 e0       	ldi	r24, 0x09	; 9
    745a:	e2 e0       	ldi	r30, 0x02	; 2
    745c:	f0 e0       	ldi	r31, 0x00	; 0
    745e:	f0 cf       	rjmp	.-32     	; 0x7440 <.L131>

00007460 <.L60>:
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == 'b')
	{
		WriteNextResponseByte('Y');
    7460:	89 e5       	ldi	r24, 0x59	; 89
    7462:	57 de       	rcall	.-850    	; 0x7112 <WriteNextResponseByte>

00007464 <.LVL47>:

		// Send block size to the host 
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
    7464:	80 e0       	ldi	r24, 0x00	; 0
    7466:	55 de       	rcall	.-854    	; 0x7112 <WriteNextResponseByte>

00007468 <.LVL48>:
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    7468:	80 e8       	ldi	r24, 0x80	; 128
    746a:	73 cf       	rjmp	.-282    	; 0x7352 <.L129>

0000746c <.L56>:
	}
	else if ((Command == 'B') || (Command == 'g'))
	{
		// Keep resetting the timeout counter if we're receiving self-programming instructions
		Timeout = 0;
    746c:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <Timeout+0x1>
    7470:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <Timeout>

00007474 <.LBB180>:
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    7474:	37 de       	rcall	.-914    	; 0x70e4 <FetchNextCommandByte>

00007476 <.LVL50>:
    7476:	d8 2f       	mov	r29, r24

00007478 <.LVL51>:
	BlockSize |=  FetchNextCommandByte();
    7478:	35 de       	rcall	.-918    	; 0x70e4 <FetchNextCommandByte>

0000747a <.LVL52>:
    747a:	c8 2f       	mov	r28, r24

0000747c <.LVL53>:

	MemoryType =  FetchNextCommandByte();
    747c:	33 de       	rcall	.-922    	; 0x70e4 <FetchNextCommandByte>

0000747e <.LVL54>:
    747e:	18 2f       	mov	r17, r24

00007480 <.LVL55>:

	if ((MemoryType != 'E') && (MemoryType != 'F'))
    7480:	8b eb       	ldi	r24, 0xBB	; 187
    7482:	81 0f       	add	r24, r17

00007484 <.Loc.341>:
    7484:	82 30       	cpi	r24, 0x02	; 2
    7486:	10 f0       	brcs	.+4      	; 0x748c <.L76>

00007488 <.L49>:
	}
	#endif
	else if (Command != 27)
	{
		// Unknown (non-sync) command, return fail code 
		WriteNextResponseByte('?');
    7488:	8f e3       	ldi	r24, 0x3F	; 63
    748a:	63 cf       	rjmp	.-314    	; 0x7352 <.L129>

0000748c <.L76>:
		return;
	}

	/* Disable timer 1 interrupt - can't afford to process nonessential interrupts
	 * while doing SPM tasks */
	TIMSK1 = 0;
    748c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

00007490 <.Loc.346>:

	/* Check if command is to read memory */
	if (Command == 'g')
    7490:	07 36       	cpi	r16, 0x67	; 103
    7492:	09 f0       	breq	.+2      	; 0x7496 <.Loc.348>

00007494 <L0>:
    7494:	45 c0       	rjmp	.+138    	; 0x7520 <.L77>

00007496 <.Loc.348>:
	{		
		/* Re-enable RWW section */
		boot_rww_enable();
    7496:	81 e1       	ldi	r24, 0x11	; 17
    7498:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    749c:	e8 95       	spm

0000749e <.Loc.349>:
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	bool     HighByte = false;
    749e:	00 e0       	ldi	r16, 0x00	; 0

000074a0 <.LVL58>:

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
				  CurrAddress += 2;

				HighByte = !HighByte;
    74a0:	bb 24       	eor	r11, r11
    74a2:	b3 94       	inc	r11

000074a4 <.L78>:
	if (Command == 'g')
	{		
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    74a4:	20 97       	sbiw	r28, 0x00	; 0
    74a6:	21 f4       	brne	.+8      	; 0x74b0 <.L82>

000074a8 <.L83>:
		/* Send response byte back to the host */
		WriteNextResponseByte('\r');
	}

	/* Re-enable timer 1 interrupt disabled earlier in this routine */	
	TIMSK1 = (1 << OCIE1A);
    74a8:	82 e0       	ldi	r24, 0x02	; 2
    74aa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    74ae:	8b cf       	rjmp	.-234    	; 0x73c6 <.L48>

000074b0 <.L82>:
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    74b0:	c0 90 c6 01 	lds	r12, 0x01C6	; 0x8001c6 <CurrAddress>
    74b4:	d0 90 c7 01 	lds	r13, 0x01C7	; 0x8001c7 <CurrAddress+0x1>
    74b8:	e0 90 c8 01 	lds	r14, 0x01C8	; 0x8001c8 <CurrAddress+0x2>
    74bc:	f0 90 c9 01 	lds	r15, 0x01C9	; 0x8001c9 <CurrAddress+0x3>

000074c0 <.LBE182>:
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == 'F')
    74c0:	16 34       	cpi	r17, 0x46	; 70
    74c2:	c1 f4       	brne	.+48     	; 0x74f4 <.L79>

000074c4 <.LBB183>:
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    74c4:	e0 2f       	mov	r30, r16
    74c6:	f0 e0       	ldi	r31, 0x00	; 0
    74c8:	ec 29       	or	r30, r12
    74ca:	fd 29       	or	r31, r13
    74cc:	84 91       	lpm	r24, Z

000074ce <.LBE183>:
    74ce:	21 de       	rcall	.-958    	; 0x7112 <WriteNextResponseByte>

000074d0 <.LVL64>:
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    74d0:	00 23       	and	r16, r16
    74d2:	69 f0       	breq	.+26     	; 0x74ee <.L80>

000074d4 <.Loc.367>:
				  CurrAddress += 2;
    74d4:	82 e0       	ldi	r24, 0x02	; 2
    74d6:	c8 0e       	add	r12, r24
    74d8:	d1 1c       	adc	r13, r1
    74da:	e1 1c       	adc	r14, r1
    74dc:	f1 1c       	adc	r15, r1

000074de <.LVL65>:
    74de:	c0 92 c6 01 	sts	0x01C6, r12	; 0x8001c6 <CurrAddress>
    74e2:	d0 92 c7 01 	sts	0x01C7, r13	; 0x8001c7 <CurrAddress+0x1>
    74e6:	e0 92 c8 01 	sts	0x01C8, r14	; 0x8001c8 <CurrAddress+0x2>
    74ea:	f0 92 c9 01 	sts	0x01C9, r15	; 0x8001c9 <CurrAddress+0x3>

000074ee <.L80>:

				HighByte = !HighByte;
    74ee:	0b 25       	eor	r16, r11

000074f0 <.L81>:
    74f0:	21 97       	sbiw	r28, 0x01	; 1

000074f2 <.LVL68>:
    74f2:	d8 cf       	rjmp	.-80     	; 0x74a4 <.L78>

000074f4 <.L79>:
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    74f4:	d7 01       	movw	r26, r14
    74f6:	c6 01       	movw	r24, r12
    74f8:	b6 95       	lsr	r27
    74fa:	a7 95       	ror	r26
    74fc:	97 95       	ror	r25
    74fe:	87 95       	ror	r24

00007500 <.Loc.375>:
    7500:	67 d4       	rcall	.+2254   	; 0x7dd0 <eeprom_read_byte>

00007502 <.LVL70>:
    7502:	07 de       	rcall	.-1010   	; 0x7112 <WriteNextResponseByte>

00007504 <.LVL71>:

				/* Increment the address counter after use */
				CurrAddress += 2;
    7504:	e2 e0       	ldi	r30, 0x02	; 2
    7506:	ce 0e       	add	r12, r30
    7508:	d1 1c       	adc	r13, r1
    750a:	e1 1c       	adc	r14, r1
    750c:	f1 1c       	adc	r15, r1
    750e:	c0 92 c6 01 	sts	0x01C6, r12	; 0x8001c6 <CurrAddress>
    7512:	d0 92 c7 01 	sts	0x01C7, r13	; 0x8001c7 <CurrAddress+0x1>
    7516:	e0 92 c8 01 	sts	0x01C8, r14	; 0x8001c8 <CurrAddress+0x2>
    751a:	f0 92 c9 01 	sts	0x01C9, r15	; 0x8001c9 <CurrAddress+0x3>
    751e:	e8 cf       	rjmp	.-48     	; 0x74f0 <.L81>

00007520 <.L77>:
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
    7520:	c0 90 c6 01 	lds	r12, 0x01C6	; 0x8001c6 <CurrAddress>
    7524:	d0 90 c7 01 	lds	r13, 0x01C7	; 0x8001c7 <CurrAddress+0x1>
    7528:	e0 90 c8 01 	lds	r14, 0x01C8	; 0x8001c8 <CurrAddress+0x2>
    752c:	f0 90 c9 01 	lds	r15, 0x01C9	; 0x8001c9 <CurrAddress+0x3>

00007530 <.Loc.380>:

		if (MemoryType == 'F')
    7530:	16 34       	cpi	r17, 0x46	; 70
    7532:	41 f4       	brne	.+16     	; 0x7544 <.L91>

00007534 <.Loc.382>:
		{
			boot_page_erase(PageStartAddress);
    7534:	83 e0       	ldi	r24, 0x03	; 3
    7536:	f6 01       	movw	r30, r12
    7538:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    753c:	e8 95       	spm

0000753e <.L85>:
			boot_spm_busy_wait();
    753e:	07 b6       	in	r0, 0x37	; 55
    7540:	00 fc       	sbrc	r0, 0
    7542:	fd cf       	rjmp	.-6      	; 0x753e <.L85>

00007544 <.L91>:
		}

		while (BlockSize--)
    7544:	20 97       	sbiw	r28, 0x00	; 0
    7546:	29 f4       	brne	.+10     	; 0x7552 <.L92>

00007548 <.Loc.388>:
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
    7548:	16 34       	cpi	r17, 0x46	; 70
    754a:	69 f1       	breq	.+90     	; 0x75a6 <.L128>

0000754c <.L93>:
			/* Wait until write operation has completed */
			boot_spm_busy_wait();
		}

		/* Send response byte back to the host */
		WriteNextResponseByte('\r');
    754c:	8d e0       	ldi	r24, 0x0D	; 13
    754e:	e1 dd       	rcall	.-1086   	; 0x7112 <WriteNextResponseByte>

00007550 <.LVL75>:
    7550:	ab cf       	rjmp	.-170    	; 0x74a8 <.L83>

00007552 <.L92>:
			boot_spm_busy_wait();
		}

		while (BlockSize--)
		{
			if (MemoryType == 'F')
    7552:	16 34       	cpi	r17, 0x46	; 70
    7554:	a1 f5       	brne	.+104    	; 0x75be <.L86>
    7556:	10 e0       	ldi	r17, 0x00	; 0

00007558 <.LVL77>:
    7558:	00 e0       	ldi	r16, 0x00	; 0

0000755a <.LVL78>:
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    755a:	77 24       	eor	r7, r7
    755c:	73 94       	inc	r7

0000755e <.L89>:
		while (BlockSize--)
		{
			if (MemoryType == 'F')
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    755e:	00 23       	and	r16, r16
    7560:	59 f1       	breq	.+86     	; 0x75b8 <.L87>

00007562 <.Loc.397>:
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    7562:	80 90 c6 01 	lds	r8, 0x01C6	; 0x8001c6 <CurrAddress>
    7566:	90 90 c7 01 	lds	r9, 0x01C7	; 0x8001c7 <CurrAddress+0x1>
    756a:	a0 90 c8 01 	lds	r10, 0x01C8	; 0x8001c8 <CurrAddress+0x2>
    756e:	b0 90 c9 01 	lds	r11, 0x01C9	; 0x8001c9 <CurrAddress+0x3>
    7572:	b8 dd       	rcall	.-1168   	; 0x70e4 <FetchNextCommandByte>

00007574 <.LVL80>:
    7574:	98 2f       	mov	r25, r24
    7576:	81 2f       	mov	r24, r17
    7578:	f4 01       	movw	r30, r8
    757a:	0c 01       	movw	r0, r24
    757c:	70 92 57 00 	sts	0x0057, r7	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7580:	e8 95       	spm
    7582:	11 24       	eor	r1, r1

00007584 <.Loc.398>:

					/* Increment the address counter after use */
					CurrAddress += 2;
    7584:	f2 e0       	ldi	r31, 0x02	; 2
    7586:	8f 0e       	add	r8, r31
    7588:	91 1c       	adc	r9, r1
    758a:	a1 1c       	adc	r10, r1
    758c:	b1 1c       	adc	r11, r1
    758e:	80 92 c6 01 	sts	0x01C6, r8	; 0x8001c6 <CurrAddress>
    7592:	90 92 c7 01 	sts	0x01C7, r9	; 0x8001c7 <CurrAddress+0x1>
    7596:	a0 92 c8 01 	sts	0x01C8, r10	; 0x8001c8 <CurrAddress+0x2>
    759a:	b0 92 c9 01 	sts	0x01C9, r11	; 0x8001c9 <CurrAddress+0x3>

0000759e <.L88>:
				else
				{
					LowByte = FetchNextCommandByte();
				}
				
				HighByte = !HighByte;
    759e:	07 25       	eor	r16, r7

000075a0 <.LVL82>:
    75a0:	21 97       	sbiw	r28, 0x01	; 1

000075a2 <.LVL83>:
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    75a2:	20 97       	sbiw	r28, 0x00	; 0
    75a4:	e1 f6       	brne	.-72     	; 0x755e <.L89>

000075a6 <.L128>:

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    75a6:	85 e0       	ldi	r24, 0x05	; 5
    75a8:	f6 01       	movw	r30, r12
    75aa:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    75ae:	e8 95       	spm

000075b0 <.L94>:

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    75b0:	07 b6       	in	r0, 0x37	; 55
    75b2:	00 fc       	sbrc	r0, 0
    75b4:	fd cf       	rjmp	.-6      	; 0x75b0 <.L94>
    75b6:	ca cf       	rjmp	.-108    	; 0x754c <.L93>

000075b8 <.L87>:
					/* Increment the address counter after use */
					CurrAddress += 2;
				}
				else
				{
					LowByte = FetchNextCommandByte();
    75b8:	95 dd       	rcall	.-1238   	; 0x70e4 <FetchNextCommandByte>

000075ba <.LVL85>:
    75ba:	18 2f       	mov	r17, r24

000075bc <.LVL86>:
    75bc:	f0 cf       	rjmp	.-32     	; 0x759e <.L88>

000075be <.L86>:
				HighByte = !HighByte;
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    75be:	92 dd       	rcall	.-1244   	; 0x70e4 <FetchNextCommandByte>

000075c0 <.LVL88>:
    75c0:	68 2f       	mov	r22, r24

000075c2 <.Loc.412>:
    75c2:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <CurrAddress>
    75c6:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <CurrAddress+0x1>
    75ca:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <CurrAddress+0x2>
    75ce:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <CurrAddress+0x3>
    75d2:	b6 95       	lsr	r27
    75d4:	a7 95       	ror	r26
    75d6:	97 95       	ror	r25
    75d8:	87 95       	ror	r24

000075da <.Loc.413>:
    75da:	02 d4       	rcall	.+2052   	; 0x7de0 <eeprom_write_byte>

000075dc <.LVL89>:

				/* Increment the address counter after use */
				CurrAddress += 2;
    75dc:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <CurrAddress>
    75e0:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <CurrAddress+0x1>
    75e4:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <CurrAddress+0x2>
    75e8:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <CurrAddress+0x3>
    75ec:	02 96       	adiw	r24, 0x02	; 2
    75ee:	a1 1d       	adc	r26, r1
    75f0:	b1 1d       	adc	r27, r1
    75f2:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <CurrAddress>
    75f6:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <CurrAddress+0x1>
    75fa:	a0 93 c8 01 	sts	0x01C8, r26	; 0x8001c8 <CurrAddress+0x2>
    75fe:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <CurrAddress+0x3>
    7602:	21 97       	sbiw	r28, 0x01	; 1

00007604 <.LVL90>:
    7604:	9f cf       	rjmp	.-194    	; 0x7544 <.L91>

00007606 <.L71>:
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == 'C')
	{
		// Write the high byte to the current flash page
		boot_page_fill(CurrAddress, FetchNextCommandByte());
    7606:	c0 91 c6 01 	lds	r28, 0x01C6	; 0x8001c6 <CurrAddress>
    760a:	d0 91 c7 01 	lds	r29, 0x01C7	; 0x8001c7 <CurrAddress+0x1>
    760e:	6a dd       	rcall	.-1324   	; 0x70e4 <FetchNextCommandByte>

00007610 <.LVL92>:
    7610:	90 e0       	ldi	r25, 0x00	; 0
    7612:	21 e0       	ldi	r18, 0x01	; 1
    7614:	fe 01       	movw	r30, r28
    7616:	0c 01       	movw	r0, r24
    7618:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    761c:	e8 95       	spm
    761e:	11 24       	eor	r1, r1

00007620 <.Loc.419>:

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
    7620:	97 ce       	rjmp	.-722    	; 0x7350 <.L130>

00007622 <.L59>:
	}
	else if (Command == 'c')
	{
		// Write the low byte to the current flash page 
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
    7622:	c0 90 c6 01 	lds	r12, 0x01C6	; 0x8001c6 <CurrAddress>
    7626:	d0 90 c7 01 	lds	r13, 0x01C7	; 0x8001c7 <CurrAddress+0x1>
    762a:	e0 90 c8 01 	lds	r14, 0x01C8	; 0x8001c8 <CurrAddress+0x2>
    762e:	f0 90 c9 01 	lds	r15, 0x01C9	; 0x8001c9 <CurrAddress+0x3>
    7632:	58 dd       	rcall	.-1360   	; 0x70e4 <FetchNextCommandByte>

00007634 <.LVL93>:
    7634:	f6 01       	movw	r30, r12
    7636:	e1 60       	ori	r30, 0x01	; 1
    7638:	90 e0       	ldi	r25, 0x00	; 0
    763a:	21 e0       	ldi	r18, 0x01	; 1
    763c:	0c 01       	movw	r0, r24
    763e:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7642:	e8 95       	spm
    7644:	11 24       	eor	r1, r1

00007646 <.Loc.421>:

		// Increment the address 
		CurrAddress += 2;
    7646:	f2 e0       	ldi	r31, 0x02	; 2
    7648:	cf 0e       	add	r12, r31
    764a:	d1 1c       	adc	r13, r1
    764c:	e1 1c       	adc	r14, r1
    764e:	f1 1c       	adc	r15, r1
    7650:	c0 92 c6 01 	sts	0x01C6, r12	; 0x8001c6 <CurrAddress>
    7654:	d0 92 c7 01 	sts	0x01C7, r13	; 0x8001c7 <CurrAddress+0x1>
    7658:	e0 92 c8 01 	sts	0x01C8, r14	; 0x8001c8 <CurrAddress+0x2>
    765c:	f0 92 c9 01 	sts	0x01C9, r15	; 0x8001c9 <CurrAddress+0x3>

00007660 <.Loc.423>:

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
    7660:	77 ce       	rjmp	.-786    	; 0x7350 <.L130>

00007662 <.L55>:
	}
	else if (Command == 'm')
	{
		// Commit the flash page to memory
		boot_page_write(CurrAddress);
    7662:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <CurrAddress>
    7666:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <CurrAddress+0x1>
    766a:	85 e0       	ldi	r24, 0x05	; 5
    766c:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7670:	e8 95       	spm

00007672 <.L95>:

		// Wait until write operation has completed 
		boot_spm_busy_wait();
    7672:	07 b6       	in	r0, 0x37	; 55
    7674:	00 fc       	sbrc	r0, 0
    7676:	fd cf       	rjmp	.-6      	; 0x7672 <.L95>
    7678:	6b ce       	rjmp	.-810    	; 0x7350 <.L130>

0000767a <.L65>:
	else if (Command == 'R')
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
    767a:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <CurrAddress>
    767e:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <CurrAddress+0x1>

00007682 <.LVL94>:
    7682:	c5 91       	lpm	r28, Z+
    7684:	d4 91       	lpm	r29, Z

00007686 <.LBE188>:
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
    7686:	8d 2f       	mov	r24, r29
    7688:	44 dd       	rcall	.-1400   	; 0x7112 <WriteNextResponseByte>

0000768a <.LVL96>:
		WriteNextResponseByte(ProgramWord & 0xFF);
    768a:	8c 2f       	mov	r24, r28
    768c:	62 ce       	rjmp	.-828    	; 0x7352 <.L129>

0000768e <.L70>:
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == 'D')
	{
		// Read the byte from the endpoint and write it to the EEPROM 
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    768e:	2a dd       	rcall	.-1452   	; 0x70e4 <FetchNextCommandByte>

00007690 <.LVL98>:
    7690:	68 2f       	mov	r22, r24

00007692 <.Loc.438>:
    7692:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <CurrAddress>
    7696:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <CurrAddress+0x1>
    769a:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <CurrAddress+0x2>
    769e:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <CurrAddress+0x3>
    76a2:	b6 95       	lsr	r27
    76a4:	a7 95       	ror	r26
    76a6:	97 95       	ror	r25
    76a8:	87 95       	ror	r24

000076aa <.Loc.439>:
    76aa:	9a d3       	rcall	.+1844   	; 0x7de0 <eeprom_write_byte>

000076ac <.LVL99>:

		// Increment the address after use
		CurrAddress += 2;
    76ac:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <CurrAddress>
    76b0:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <CurrAddress+0x1>
    76b4:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <CurrAddress+0x2>
    76b8:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <CurrAddress+0x3>
    76bc:	02 96       	adiw	r24, 0x02	; 2
    76be:	a1 1d       	adc	r26, r1
    76c0:	b1 1d       	adc	r27, r1
    76c2:	6d ce       	rjmp	.-806    	; 0x739e <.L132>

000076c4 <.L58>:
		WriteNextResponseByte('\r');
	}
	else if (Command == 'd')
	{
		// Read the EEPROM byte and write it to the endpoint 
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    76c4:	c0 90 c6 01 	lds	r12, 0x01C6	; 0x8001c6 <CurrAddress>
    76c8:	d0 90 c7 01 	lds	r13, 0x01C7	; 0x8001c7 <CurrAddress+0x1>
    76cc:	e0 90 c8 01 	lds	r14, 0x01C8	; 0x8001c8 <CurrAddress+0x2>
    76d0:	f0 90 c9 01 	lds	r15, 0x01C9	; 0x8001c9 <CurrAddress+0x3>
    76d4:	d7 01       	movw	r26, r14
    76d6:	c6 01       	movw	r24, r12
    76d8:	b6 95       	lsr	r27
    76da:	a7 95       	ror	r26
    76dc:	97 95       	ror	r25
    76de:	87 95       	ror	r24

000076e0 <.Loc.444>:
    76e0:	77 d3       	rcall	.+1774   	; 0x7dd0 <eeprom_read_byte>

000076e2 <.LVL100>:
    76e2:	17 dd       	rcall	.-1490   	; 0x7112 <WriteNextResponseByte>

000076e4 <.LVL101>:

		// Increment the address after use 
		CurrAddress += 2;
    76e4:	22 e0       	ldi	r18, 0x02	; 2
    76e6:	c2 0e       	add	r12, r18
    76e8:	d1 1c       	adc	r13, r1
    76ea:	e1 1c       	adc	r14, r1
    76ec:	f1 1c       	adc	r15, r1
    76ee:	c0 92 c6 01 	sts	0x01C6, r12	; 0x8001c6 <CurrAddress>
    76f2:	d0 92 c7 01 	sts	0x01C7, r13	; 0x8001c7 <CurrAddress+0x1>
    76f6:	e0 92 c8 01 	sts	0x01C8, r14	; 0x8001c8 <CurrAddress+0x2>
    76fa:	f0 92 c9 01 	sts	0x01C9, r15	; 0x8001c9 <CurrAddress+0x3>
    76fe:	63 ce       	rjmp	.-826    	; 0x73c6 <.L48>

00007700 <.L100>:
	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7700:	8e b3       	in	r24, 0x1e	; 30

00007702 <.Loc.449>:
    7702:	88 23       	and	r24, r24
    7704:	69 f0       	breq	.+26     	; 0x7720 <.L42>

00007706 <.L97>:
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7706:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

0000770a <.LBE189>:
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
	{
		while (!(Endpoint_IsINReady()))
    770a:	80 ff       	sbrs	r24, 0
    770c:	f9 cf       	rjmp	.-14     	; 0x7700 <.L100>

0000770e <.LBB191>:
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    770e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7712:	8e 77       	andi	r24, 0x7E	; 126
    7714:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

00007718 <.Loc.459>:
				#else
					UEINTX &= ~(1 << TXINI);
				#endif
			}
    7718:	62 ce       	rjmp	.-828    	; 0x73de <.L101>

0000771a <.L102>:
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    771a:	8e b3       	in	r24, 0x1e	; 30

0000771c <.Loc.462>:
    771c:	81 11       	cpse	r24, r1
    771e:	5f ce       	rjmp	.-834    	; 0x73de <.L101>

00007720 <.L42>:
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Acknowledge the command from the host */
	Endpoint_ClearOUT();
}
    7720:	df 91       	pop	r29
    7722:	cf 91       	pop	r28
    7724:	1f 91       	pop	r17
    7726:	0f 91       	pop	r16
    7728:	ff 90       	pop	r15
    772a:	ef 90       	pop	r14
    772c:	df 90       	pop	r13
    772e:	cf 90       	pop	r12
    7730:	bf 90       	pop	r11
    7732:	af 90       	pop	r10
    7734:	9f 90       	pop	r9
    7736:	8f 90       	pop	r8
    7738:	7f 90       	pop	r7
    773a:	08 95       	ret

0000773c <main>:
 *  runs the bootloader processing routine until it times out or is instructed to exit.
 */
int main(void)
{
	/* Save the value of the boot key memory before it is overwritten */
	uint16_t bootKeyPtrVal = *bootKeyPtr;
    773c:	20 91 00 08 	lds	r18, 0x0800	; 0x800800 <__bss_end+0x62c>
    7740:	30 91 01 08 	lds	r19, 0x0801	; 0x800801 <__bss_end+0x62d>

00007744 <.LVL104>:
	*bootKeyPtr = 0;
    7744:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <__bss_end+0x62d>
    7748:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__bss_end+0x62c>

0000774c <.Loc.469>:

	/* Check the reason for the reset so we can act accordingly */
	uint8_t  mcusr_state = MCUSR;		// store the initial state of the Status register
    774c:	84 b7       	in	r24, 0x34	; 52

0000774e <.LVL105>:
	MCUSR = 0;							// clear all reset flags	
    774e:	14 be       	out	0x34, r1	; 52

00007750 <.LBB193>:
    7750:	0f b6       	in	r0, 0x3f	; 63
    7752:	f8 94       	cli
    7754:	a8 95       	wdr
    7756:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    775a:	98 61       	ori	r25, 0x18	; 24
    775c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7760:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7764:	0f be       	out	0x3f, r0	; 63

00007766 <.LBE193>:

	/* Watchdog may be configured with a 15 ms period so must disable it before going any further */
	wdt_disable();
	
	if (mcusr_state & (1<<EXTRF)) {
    7766:	81 fd       	sbrc	r24, 1
    7768:	0a c0       	rjmp	.+20     	; 0x777e <.L134>

0000776a <.Loc.480>:
		// External reset -  we should continue to self-programming mode.
	} else if ((mcusr_state & (1<<PORF)) && (pgm_read_word(0) != 0xFFFF)) {		
    776a:	80 ff       	sbrs	r24, 0
    776c:	1b c0       	rjmp	.+54     	; 0x77a4 <.L135>

0000776e <.LBB195>:
    776e:	e0 e0       	ldi	r30, 0x00	; 0
    7770:	f0 e0       	ldi	r31, 0x00	; 0
    7772:	45 91       	lpm	r20, Z+
    7774:	54 91       	lpm	r21, Z

00007776 <.LBE195>:
    7776:	4f 3f       	cpi	r20, 0xFF	; 255
    7778:	5f 4f       	sbci	r21, 0xFF	; 255
    777a:	a1 f0       	breq	.+40     	; 0x77a4 <.L135>

0000777c <.L136>:
		// After a power-on reset skip the bootloader and jump straight to sketch 
		// if one exists.	
		StartSketch();
    777c:	e8 dc       	rcall	.-1584   	; 0x714e <StartSketch>

0000777e <.L134>:
		// If it looks like an "accidental" watchdog reset then start the sketch.
		StartSketch();
	}
	
	/* Setup hardware required for the bootloader */
	SetupHardware();
    777e:	0f dd       	rcall	.-1506   	; 0x719e <SetupHardware>

00007780 <.LVL110>:

	/* Enable global interrupts so that the USB stack can function */
	sei();
    7780:	78 94       	sei

00007782 <.Loc.490>:
	
	Timeout = 0;
    7782:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <Timeout+0x1>
    7786:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <Timeout>

0000778a <.L137>:
	
	while (RunBootloader)
    778a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <RunBootloader>
    778e:	81 11       	cpse	r24, r1
    7790:	19 c0       	rjmp	.+50     	; 0x77c4 <.L139>

00007792 <.LBB196>:
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    7792:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

00007796 <.Loc.497>:
    7796:	81 60       	ori	r24, 0x01	; 1
    7798:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

0000779c <.LBE196>:

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Jump to beginning of application space to run the sketch - do not reset */	
	StartSketch();
    779c:	d8 dc       	rcall	.-1616   	; 0x714e <StartSketch>

0000779e <.LVL111>:
}
    779e:	80 e0       	ldi	r24, 0x00	; 0
    77a0:	90 e0       	ldi	r25, 0x00	; 0
    77a2:	08 95       	ret

000077a4 <.L135>:
		// External reset -  we should continue to self-programming mode.
	} else if ((mcusr_state & (1<<PORF)) && (pgm_read_word(0) != 0xFFFF)) {		
		// After a power-on reset skip the bootloader and jump straight to sketch 
		// if one exists.	
		StartSketch();
	} else if ((mcusr_state & (1<<WDRF)) && (bootKeyPtrVal != bootKey) && (pgm_read_word(0) != 0xFFFF)) {	
    77a4:	83 ff       	sbrs	r24, 3
    77a6:	eb cf       	rjmp	.-42     	; 0x777e <.L134>

000077a8 <.Loc.502>:
    77a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    77ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>

000077b0 <.LVL113>:
    77b0:	82 17       	cp	r24, r18
    77b2:	93 07       	cpc	r25, r19
    77b4:	21 f3       	breq	.-56     	; 0x777e <.L134>

000077b6 <.LBB198>:
    77b6:	e0 e0       	ldi	r30, 0x00	; 0
    77b8:	f0 e0       	ldi	r31, 0x00	; 0
    77ba:	85 91       	lpm	r24, Z+
    77bc:	94 91       	lpm	r25, Z

000077be <.LBE198>:
    77be:	01 96       	adiw	r24, 0x01	; 1

000077c0 <.LVL116>:
    77c0:	f1 f2       	breq	.-68     	; 0x777e <.L134>
    77c2:	dc cf       	rjmp	.-72     	; 0x777c <.L136>

000077c4 <.L139>:
	
	Timeout = 0;
	
	while (RunBootloader)
	{
		CDC_Task();
    77c4:	97 dd       	rcall	.-1234   	; 0x72f4 <CDC_Task>

000077c6 <.LVL118>:
		USB_USBTask();
    77c6:	ed d2       	rcall	.+1498   	; 0x7da2 <USB_USBTask>

000077c8 <.LVL119>:
		/* Time out and start the sketch if one is present */
		if (Timeout > TIMEOUT_PERIOD)
    77c8:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <Timeout>
    77cc:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <Timeout+0x1>
    77d0:	81 34       	cpi	r24, 0x41	; 65
    77d2:	9f 41       	sbci	r25, 0x1F	; 31
    77d4:	10 f0       	brcs	.+4      	; 0x77da <.L138>

000077d6 <.Loc.514>:
			RunBootloader = false;
    77d6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <RunBootloader>

000077da <.L138>:

		LEDPulse();
    77da:	cb dc       	rcall	.-1642   	; 0x7172 <LEDPulse>

000077dc <.LVL120>:
    77dc:	d6 cf       	rjmp	.-84     	; 0x778a <.L137>

000077de <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    77de:	fa 01       	movw	r30, r20
	const uint8_t  DescriptorType   = (wValue >> 8);
    77e0:	29 2f       	mov	r18, r25
    77e2:	30 e0       	ldi	r19, 0x00	; 0
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    77e4:	22 30       	cpi	r18, 0x02	; 2
    77e6:	31 05       	cpc	r19, r1
    77e8:	c1 f0       	breq	.+48     	; 0x781a <CALLBACK_USB_GetDescriptor+0x3c>
    77ea:	23 30       	cpi	r18, 0x03	; 3
    77ec:	31 05       	cpc	r19, r1
    77ee:	51 f0       	breq	.+20     	; 0x7804 <CALLBACK_USB_GetDescriptor+0x26>
    77f0:	21 30       	cpi	r18, 0x01	; 1
    77f2:	31 05       	cpc	r19, r1
    77f4:	09 f5       	brne	.+66     	; 0x7838 <CALLBACK_USB_GetDescriptor+0x5a>
    77f6:	82 e1       	ldi	r24, 0x12	; 18
    77f8:	90 e0       	ldi	r25, 0x00	; 0
    77fa:	22 ea       	ldi	r18, 0xA2	; 162
    77fc:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
    77fe:	31 83       	std	Z+1, r19	; 0x01
    7800:	20 83       	st	Z, r18
	return Size;
}
    7802:	08 95       	ret
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
    7804:	88 23       	and	r24, r24
    7806:	71 f0       	breq	.+28     	; 0x7824 <CALLBACK_USB_GetDescriptor+0x46>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
    7808:	81 30       	cpi	r24, 0x01	; 1
    780a:	89 f0       	breq	.+34     	; 0x782e <CALLBACK_USB_GetDescriptor+0x50>
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
    780c:	82 30       	cpi	r24, 0x02	; 2
    780e:	a1 f4       	brne	.+40     	; 0x7838 <CALLBACK_USB_GetDescriptor+0x5a>
			{
				Address = &ManufNameString;
				Size	= ManufNameString.Header.Size;
    7810:	88 e1       	ldi	r24, 0x18	; 24
    7812:	90 e0       	ldi	r25, 0x00	; 0
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
			{
				Address = &ManufNameString;
    7814:	2a e0       	ldi	r18, 0x0A	; 10
    7816:	31 e0       	ldi	r19, 0x01	; 1
    7818:	f2 cf       	rjmp	.-28     	; 0x77fe <CALLBACK_USB_GetDescriptor+0x20>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    781a:	8e e3       	ldi	r24, 0x3E	; 62
    781c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    781e:	24 e6       	ldi	r18, 0x64	; 100
    7820:	31 e0       	ldi	r19, 0x01	; 1
    7822:	ed cf       	rjmp	.-38     	; 0x77fe <CALLBACK_USB_GetDescriptor+0x20>
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    7824:	84 e0       	ldi	r24, 0x04	; 4
    7826:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
    7828:	20 e6       	ldi	r18, 0x60	; 96
    782a:	31 e0       	ldi	r19, 0x01	; 1
    782c:	e8 cf       	rjmp	.-48     	; 0x77fe <CALLBACK_USB_GetDescriptor+0x20>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    782e:	82 e2       	ldi	r24, 0x22	; 34
    7830:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
    7832:	20 e4       	ldi	r18, 0x40	; 64
    7834:	31 e0       	ldi	r19, 0x01	; 1
    7836:	e3 cf       	rjmp	.-58     	; 0x77fe <CALLBACK_USB_GetDescriptor+0x20>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    7838:	90 e0       	ldi	r25, 0x00	; 0
    783a:	80 e0       	ldi	r24, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    783c:	30 e0       	ldi	r19, 0x00	; 0
    783e:	20 e0       	ldi	r18, 0x00	; 0
    7840:	de cf       	rjmp	.-68     	; 0x77fe <CALLBACK_USB_GetDescriptor+0x20>

00007842 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    7842:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7846:	eb ee       	ldi	r30, 0xEB	; 235
    7848:	f0 e0       	ldi	r31, 0x00	; 0
    784a:	80 81       	ld	r24, Z
    784c:	81 60       	ori	r24, 0x01	; 1
    784e:	80 83       	st	Z, r24
    7850:	ed ee       	ldi	r30, 0xED	; 237
    7852:	f0 e0       	ldi	r31, 0x00	; 0
    7854:	10 82       	st	Z, r1
    7856:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    785a:	40 83       	st	Z, r20
    785c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    7860:	88 1f       	adc	r24, r24
    7862:	88 27       	eor	r24, r24
    7864:	88 1f       	adc	r24, r24
    7866:	08 95       	ret

00007868 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    7868:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <USB_ControlRequest>
    786c:	87 ff       	sbrs	r24, 7
    786e:	11 c0       	rjmp	.+34     	; 0x7892 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7870:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    7874:	82 ff       	sbrs	r24, 2
    7876:	06 c0       	rjmp	.+12     	; 0x7884 <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7878:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    787c:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    787e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				#else
					UEINTX &= ~(1 << TXINI);
				#endif
			}
    7882:	03 c0       	rjmp	.+6      	; 0x788a <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7884:	8e b3       	in	r24, 0x1e	; 30
    7886:	81 11       	cpse	r24, r1
    7888:	f3 cf       	rjmp	.-26     	; 0x7870 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    788a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    788c:	8e b3       	in	r24, 0x1e	; 30
    788e:	88 23       	and	r24, r24
    7890:	e1 f3       	breq	.-8      	; 0x788a <Endpoint_ClearStatusStage+0x22>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7892:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    7896:	80 ff       	sbrs	r24, 0
    7898:	f9 cf       	rjmp	.-14     	; 0x788c <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    789a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    789e:	8e 77       	andi	r24, 0x7E	; 126
    78a0:	ee cf       	rjmp	.-36     	; 0x787e <Endpoint_ClearStatusStage+0x16>

000078a2 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    78a2:	0f 93       	push	r16
    78a4:	1f 93       	push	r17
    78a6:	cf 93       	push	r28
    78a8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    78aa:	41 d0       	rcall	.+130    	; 0x792e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    78ac:	48 d0       	rcall	.+144    	; 0x793e <USB_INT_ClearAllInterrupts>
    78ae:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    78b0:	d0 e0       	ldi	r29, 0x00	; 0
    78b2:	88 81       	ld	r24, Y
    78b4:	8f 77       	andi	r24, 0x7F	; 127
    78b6:	88 83       	st	Y, r24
    78b8:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    78ba:	80 68       	ori	r24, 0x80	; 128
    78bc:	88 83       	st	Y, r24
    78be:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    78c0:	8f 7d       	andi	r24, 0xDF	; 223
    78c2:	88 83       	st	Y, r24
    78c4:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    78c6:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    78c8:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    78cc:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    78ce:	10 e0       	ldi	r17, 0x00	; 0
    78d0:	f8 01       	movw	r30, r16
    78d2:	80 81       	ld	r24, Z
    78d4:	8b 7f       	andi	r24, 0xFB	; 251
    78d6:	80 83       	st	Z, r24
    78d8:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    78da:	81 60       	ori	r24, 0x01	; 1
    78dc:	88 83       	st	Y, r24
    78de:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    78e0:	60 e0       	ldi	r22, 0x00	; 0
    78e2:	80 e0       	ldi	r24, 0x00	; 0
    78e4:	ae df       	rcall	.-164    	; 0x7842 <Endpoint_ConfigureEndpoint_Prv>
    78e6:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    78e8:	f0 e0       	ldi	r31, 0x00	; 0
    78ea:	80 81       	ld	r24, Z
    78ec:	8e 7f       	andi	r24, 0xFE	; 254
    78ee:	80 83       	st	Z, r24
    78f0:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    78f2:	f0 e0       	ldi	r31, 0x00	; 0
    78f4:	80 81       	ld	r24, Z
    78f6:	81 60       	ori	r24, 0x01	; 1
    78f8:	80 83       	st	Z, r24
    78fa:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    78fc:	88 60       	ori	r24, 0x08	; 8
    78fe:	80 83       	st	Z, r24
    7900:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    7902:	80 81       	ld	r24, Z
    7904:	8e 7f       	andi	r24, 0xFE	; 254
    7906:	80 83       	st	Z, r24
    7908:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    790a:	80 61       	ori	r24, 0x10	; 16
    790c:	88 83       	st	Y, r24
    790e:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    7910:	cf 91       	pop	r28
    7912:	1f 91       	pop	r17
    7914:	0f 91       	pop	r16
    7916:	08 95       	ret

00007918 <USB_Init>:
    7918:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    791a:	f0 e0       	ldi	r31, 0x00	; 0
    791c:	80 81       	ld	r24, Z
    791e:	81 60       	ori	r24, 0x01	; 1
    7920:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    7922:	8a e4       	ldi	r24, 0x4A	; 74
    7924:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    7926:	81 e0       	ldi	r24, 0x01	; 1
    7928:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <USB_IsInitialized>

	USB_ResetInterface();
    792c:	ba cf       	rjmp	.-140    	; 0x78a2 <USB_ResetInterface>

0000792e <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    792e:	e8 ed       	ldi	r30, 0xD8	; 216
    7930:	f0 e0       	ldi	r31, 0x00	; 0
    7932:	80 81       	ld	r24, Z
    7934:	8e 7f       	andi	r24, 0xFE	; 254
    7936:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    7938:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
    793c:	08 95       	ret

0000793e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    793e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    7942:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
    7946:	08 95       	ret

00007948 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    7948:	1f 92       	push	r1
    794a:	0f 92       	push	r0
    794c:	0f b6       	in	r0, 0x3f	; 63
    794e:	0f 92       	push	r0
    7950:	11 24       	eor	r1, r1
    7952:	2f 93       	push	r18
    7954:	3f 93       	push	r19
    7956:	4f 93       	push	r20
    7958:	5f 93       	push	r21
    795a:	6f 93       	push	r22
    795c:	7f 93       	push	r23
    795e:	8f 93       	push	r24
    7960:	9f 93       	push	r25
    7962:	af 93       	push	r26
    7964:	bf 93       	push	r27
    7966:	ef 93       	push	r30
    7968:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    796a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    796e:	80 ff       	sbrs	r24, 0
    7970:	17 c0       	rjmp	.+46     	; 0x79a0 <__vector_10+0x58>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    7972:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    7976:	80 ff       	sbrs	r24, 0
    7978:	13 c0       	rjmp	.+38     	; 0x79a0 <__vector_10+0x58>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    797a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    797e:	8e 7f       	andi	r24, 0xFE	; 254
    7980:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    7984:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    7988:	80 ff       	sbrs	r24, 0
    798a:	4e c0       	rjmp	.+156    	; 0x7a28 <__vector_10+0xe0>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    798c:	80 e1       	ldi	r24, 0x10	; 16
    798e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7990:	82 e1       	ldi	r24, 0x12	; 18
    7992:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    7994:	09 b4       	in	r0, 0x29	; 41
    7996:	00 fe       	sbrs	r0, 0
    7998:	fd cf       	rjmp	.-6      	; 0x7994 <__vector_10+0x4c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    799a:	81 e0       	ldi	r24, 0x01	; 1
    799c:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    799e:	00 d2       	rcall	.+1024   	; 0x7da0 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    79a0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    79a4:	80 ff       	sbrs	r24, 0
    79a6:	17 c0       	rjmp	.+46     	; 0x79d6 <__vector_10+0x8e>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    79a8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    79ac:	80 ff       	sbrs	r24, 0
    79ae:	13 c0       	rjmp	.+38     	; 0x79d6 <__vector_10+0x8e>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    79b0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    79b4:	8e 7f       	andi	r24, 0xFE	; 254
    79b6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    79ba:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    79be:	80 61       	ori	r24, 0x10	; 16
    79c0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    79c4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    79c8:	80 62       	ori	r24, 0x20	; 32
    79ca:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    79ce:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    79d0:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
    79d2:	8e bb       	out	0x1e, r24	; 30
    79d4:	e5 d1       	rcall	.+970    	; 0x7da0 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    79d6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    79da:	84 ff       	sbrs	r24, 4
    79dc:	30 c0       	rjmp	.+96     	; 0x7a3e <__vector_10+0xf6>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    79de:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    79e2:	84 ff       	sbrs	r24, 4
    79e4:	2c c0       	rjmp	.+88     	; 0x7a3e <__vector_10+0xf6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    79e6:	80 e1       	ldi	r24, 0x10	; 16
    79e8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    79ea:	82 e1       	ldi	r24, 0x12	; 18
    79ec:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    79ee:	09 b4       	in	r0, 0x29	; 41
    79f0:	00 fe       	sbrs	r0, 0
    79f2:	fd cf       	rjmp	.-6      	; 0x79ee <__vector_10+0xa6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    79f4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    79f8:	8f 7d       	andi	r24, 0xDF	; 223
    79fa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    79fe:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7a02:	8f 7e       	andi	r24, 0xEF	; 239
    7a04:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7a08:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a0c:	8f 7e       	andi	r24, 0xEF	; 239
    7a0e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7a12:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a16:	81 60       	ori	r24, 0x01	; 1
    7a18:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7a1c:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <USB_Device_ConfigurationNumber>
    7a20:	88 23       	and	r24, r24
    7a22:	31 f0       	breq	.+12     	; 0x7a30 <__vector_10+0xe8>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7a24:	84 e0       	ldi	r24, 0x04	; 4
    7a26:	09 c0       	rjmp	.+18     	; 0x7a3a <__vector_10+0xf2>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    7a28:	19 bc       	out	0x29, r1	; 41
			EVENT_USB_Device_Disconnect();
    7a2a:	1e ba       	out	0x1e, r1	; 30
    7a2c:	b9 d1       	rcall	.+882    	; 0x7da0 <USB_Event_Stub>
    7a2e:	b8 cf       	rjmp	.-144    	; 0x79a0 <__vector_10+0x58>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7a30:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7a34:	87 fd       	sbrc	r24, 7
    7a36:	f6 cf       	rjmp	.-20     	; 0x7a24 <__vector_10+0xdc>
    7a38:	81 e0       	ldi	r24, 0x01	; 1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7a3a:	8e bb       	out	0x1e, r24	; 30
    7a3c:	b1 d1       	rcall	.+866    	; 0x7da0 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7a3e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7a42:	83 ff       	sbrs	r24, 3
    7a44:	21 c0       	rjmp	.+66     	; 0x7a88 <__vector_10+0x140>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7a46:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a4a:	83 ff       	sbrs	r24, 3
    7a4c:	1d c0       	rjmp	.+58     	; 0x7a88 <__vector_10+0x140>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7a4e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7a52:	87 7f       	andi	r24, 0xF7	; 247
    7a54:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7a58:	82 e0       	ldi	r24, 0x02	; 2
    7a5a:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    7a5c:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7a60:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7a64:	8e 7f       	andi	r24, 0xFE	; 254
    7a66:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7a6a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a6e:	8e 7f       	andi	r24, 0xFE	; 254
    7a70:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7a74:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7a78:	80 61       	ori	r24, 0x10	; 16
    7a7a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7a7e:	42 e0       	ldi	r20, 0x02	; 2
    7a80:	60 e0       	ldi	r22, 0x00	; 0
    7a82:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7a84:	de de       	rcall	.-580    	; 0x7842 <Endpoint_ConfigureEndpoint_Prv>
    7a86:	8c d1       	rcall	.+792    	; 0x7da0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7a88:	ff 91       	pop	r31
    7a8a:	ef 91       	pop	r30
    7a8c:	bf 91       	pop	r27
    7a8e:	af 91       	pop	r26
    7a90:	9f 91       	pop	r25
    7a92:	8f 91       	pop	r24
    7a94:	7f 91       	pop	r23
    7a96:	6f 91       	pop	r22
    7a98:	5f 91       	pop	r21
    7a9a:	4f 91       	pop	r20
    7a9c:	3f 91       	pop	r19
    7a9e:	2f 91       	pop	r18
    7aa0:	0f 90       	pop	r0
    7aa2:	0f be       	out	0x3f, r0	; 63
    7aa4:	0f 90       	pop	r0
    7aa6:	1f 90       	pop	r1
    7aa8:	18 95       	reti

00007aaa <Endpoint_Write_Control_Stream_LE>:
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7aaa:	fc 01       	movw	r30, r24
    7aac:	cb 01       	movw	r24, r22
    7aae:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <USB_ControlRequest+0x6>
    7ab2:	30 91 d2 01 	lds	r19, 0x01D2	; 0x8001d2 <USB_ControlRequest+0x7>
    7ab6:	26 17       	cp	r18, r22
    7ab8:	37 07       	cpc	r19, r23
    7aba:	90 f0       	brcs	.+36     	; 0x7ae0 <Endpoint_Write_Control_Stream_LE+0x36>
    7abc:	00 97       	sbiw	r24, 0x00	; 0
    7abe:	29 f4       	brne	.+10     	; 0x7aca <Endpoint_Write_Control_Stream_LE+0x20>
    7ac0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7ac4:	2e 77       	andi	r18, 0x7E	; 126
    7ac6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7aca:	40 e0       	ldi	r20, 0x00	; 0
    7acc:	00 97       	sbiw	r24, 0x00	; 0
    7ace:	51 f4       	brne	.+20     	; 0x7ae4 <Endpoint_Write_Control_Stream_LE+0x3a>
    7ad0:	41 11       	cpse	r20, r1
    7ad2:	08 c0       	rjmp	.+16     	; 0x7ae4 <Endpoint_Write_Control_Stream_LE+0x3a>
    7ad4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7ad8:	82 ff       	sbrs	r24, 2
    7ada:	30 c0       	rjmp	.+96     	; 0x7b3c <Endpoint_Write_Control_Stream_LE+0x92>
    7adc:	80 e0       	ldi	r24, 0x00	; 0
    7ade:	08 95       	ret
    7ae0:	c9 01       	movw	r24, r18
    7ae2:	f3 cf       	rjmp	.-26     	; 0x7aca <Endpoint_Write_Control_Stream_LE+0x20>
    7ae4:	2e b3       	in	r18, 0x1e	; 30
    7ae6:	22 23       	and	r18, r18
    7ae8:	91 f1       	breq	.+100    	; 0x7b4e <Endpoint_Write_Control_Stream_LE+0xa4>
    7aea:	25 30       	cpi	r18, 0x05	; 5
    7aec:	61 f1       	breq	.+88     	; 0x7b46 <Endpoint_Write_Control_Stream_LE+0x9c>
    7aee:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7af2:	23 fd       	sbrc	r18, 3
    7af4:	2a c0       	rjmp	.+84     	; 0x7b4a <Endpoint_Write_Control_Stream_LE+0xa0>
    7af6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7afa:	22 fd       	sbrc	r18, 2
    7afc:	eb cf       	rjmp	.-42     	; 0x7ad4 <Endpoint_Write_Control_Stream_LE+0x2a>
    7afe:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b02:	20 ff       	sbrs	r18, 0
    7b04:	e3 cf       	rjmp	.-58     	; 0x7acc <Endpoint_Write_Control_Stream_LE+0x22>
    7b06:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    7b0a:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    7b0e:	00 97       	sbiw	r24, 0x00	; 0
    7b10:	19 f0       	breq	.+6      	; 0x7b18 <Endpoint_Write_Control_Stream_LE+0x6e>
    7b12:	28 30       	cpi	r18, 0x08	; 8
    7b14:	31 05       	cpc	r19, r1
    7b16:	58 f0       	brcs	.+22     	; 0x7b2e <Endpoint_Write_Control_Stream_LE+0x84>
    7b18:	41 e0       	ldi	r20, 0x01	; 1
    7b1a:	28 30       	cpi	r18, 0x08	; 8
    7b1c:	31 05       	cpc	r19, r1
    7b1e:	09 f0       	breq	.+2      	; 0x7b22 <Endpoint_Write_Control_Stream_LE+0x78>
    7b20:	40 e0       	ldi	r20, 0x00	; 0
    7b22:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b26:	2e 77       	andi	r18, 0x7E	; 126
    7b28:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b2c:	cf cf       	rjmp	.-98     	; 0x7acc <Endpoint_Write_Control_Stream_LE+0x22>
    7b2e:	41 91       	ld	r20, Z+
    7b30:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7b34:	01 97       	sbiw	r24, 0x01	; 1
    7b36:	2f 5f       	subi	r18, 0xFF	; 255
    7b38:	3f 4f       	sbci	r19, 0xFF	; 255
    7b3a:	e9 cf       	rjmp	.-46     	; 0x7b0e <Endpoint_Write_Control_Stream_LE+0x64>
    7b3c:	8e b3       	in	r24, 0x1e	; 30
    7b3e:	88 23       	and	r24, r24
    7b40:	31 f0       	breq	.+12     	; 0x7b4e <Endpoint_Write_Control_Stream_LE+0xa4>
    7b42:	85 30       	cpi	r24, 0x05	; 5
    7b44:	39 f6       	brne	.-114    	; 0x7ad4 <Endpoint_Write_Control_Stream_LE+0x2a>
    7b46:	83 e0       	ldi	r24, 0x03	; 3
    7b48:	08 95       	ret
    7b4a:	81 e0       	ldi	r24, 0x01	; 1
    7b4c:	08 95       	ret
    7b4e:	82 e0       	ldi	r24, 0x02	; 2
    7b50:	08 95       	ret

00007b52 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    7b52:	fc 01       	movw	r30, r24
    7b54:	cb 01       	movw	r24, r22
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    7b56:	00 97       	sbiw	r24, 0x00	; 0
    7b58:	29 f4       	brne	.+10     	; 0x7b64 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7b5a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b5e:	2b 77       	andi	r18, 0x7B	; 123
    7b60:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  Endpoint_ClearOUT();

	while (Length)
    7b64:	00 97       	sbiw	r24, 0x00	; 0
    7b66:	31 f4       	brne	.+12     	; 0x7b74 <Endpoint_Read_Control_Stream_LE+0x22>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7b68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7b6c:	80 ff       	sbrs	r24, 0
    7b6e:	1b c0       	rjmp	.+54     	; 0x7ba6 <Endpoint_Read_Control_Stream_LE+0x54>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7b70:	80 e0       	ldi	r24, 0x00	; 0
    7b72:	08 95       	ret
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7b74:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7b76:	22 23       	and	r18, r18
    7b78:	f9 f0       	breq	.+62     	; 0x7bb8 <Endpoint_Read_Control_Stream_LE+0x66>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7b7a:	25 30       	cpi	r18, 0x05	; 5
    7b7c:	c9 f0       	breq	.+50     	; 0x7bb0 <Endpoint_Read_Control_Stream_LE+0x5e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7b7e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7b82:	23 fd       	sbrc	r18, 3
    7b84:	17 c0       	rjmp	.+46     	; 0x7bb4 <Endpoint_Read_Control_Stream_LE+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7b86:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    7b8a:	22 ff       	sbrs	r18, 2
    7b8c:	eb cf       	rjmp	.-42     	; 0x7b64 <Endpoint_Read_Control_Stream_LE+0x12>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7b8e:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    7b92:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		{
			while (Length && Endpoint_BytesInEndpoint())
    7b96:	23 2b       	or	r18, r19
    7b98:	01 f3       	breq	.-64     	; 0x7b5a <Endpoint_Read_Control_Stream_LE+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7b9a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7b9e:	21 93       	st	Z+, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7ba0:	01 97       	sbiw	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    7ba2:	a9 f7       	brne	.-22     	; 0x7b8e <Endpoint_Read_Control_Stream_LE+0x3c>
    7ba4:	da cf       	rjmp	.-76     	; 0x7b5a <Endpoint_Read_Control_Stream_LE+0x8>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7ba6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7ba8:	88 23       	and	r24, r24
    7baa:	31 f0       	breq	.+12     	; 0x7bb8 <Endpoint_Read_Control_Stream_LE+0x66>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7bac:	85 30       	cpi	r24, 0x05	; 5
    7bae:	e1 f6       	brne	.-72     	; 0x7b68 <Endpoint_Read_Control_Stream_LE+0x16>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7bb0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7bb2:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7bb4:	81 e0       	ldi	r24, 0x01	; 1
    7bb6:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7bb8:	82 e0       	ldi	r24, 0x02	; 2
    7bba:	08 95       	ret

00007bbc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7bbc:	0f 93       	push	r16
    7bbe:	1f 93       	push	r17
    7bc0:	cf 93       	push	r28
    7bc2:	df 93       	push	r29
    7bc4:	00 d0       	rcall	.+0      	; 0x7bc6 <USB_Device_ProcessControlRequest+0xa>
    7bc6:	cd b7       	in	r28, 0x3d	; 61
    7bc8:	de b7       	in	r29, 0x3e	; 62
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    7bca:	8b ec       	ldi	r24, 0xCB	; 203
    7bcc:	91 e0       	ldi	r25, 0x01	; 1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7bce:	fc 01       	movw	r30, r24
    7bd0:	01 96       	adiw	r24, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7bd2:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7bd6:	20 83       	st	Z, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7bd8:	21 e0       	ldi	r18, 0x01	; 1
    7bda:	83 3d       	cpi	r24, 0xD3	; 211
    7bdc:	92 07       	cpc	r25, r18
    7bde:	b9 f7       	brne	.-18     	; 0x7bce <USB_Device_ProcessControlRequest+0x12>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    7be0:	5b db       	rcall	.-2378   	; 0x7298 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7be2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    7be6:	83 ff       	sbrs	r24, 3
    7be8:	29 c0       	rjmp	.+82     	; 0x7c3c <USB_Device_ProcessControlRequest+0x80>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7bea:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    7bee:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <USB_ControlRequest+0x1>
    7bf2:	9a 30       	cpi	r25, 0x0A	; 10
    7bf4:	18 f5       	brcc	.+70     	; 0x7c3c <USB_Device_ProcessControlRequest+0x80>
    7bf6:	e9 2f       	mov	r30, r25
    7bf8:	f0 e0       	ldi	r31, 0x00	; 0
    7bfa:	ec 5c       	subi	r30, 0xCC	; 204
    7bfc:	f0 4c       	sbci	r31, 0xC0	; 192
    7bfe:	e2 c0       	rjmp	.+452    	; 0x7dc4 <__tablejump2__>

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;

	switch (USB_ControlRequest.bmRequestType)
    7c00:	82 38       	cpi	r24, 0x82	; 130
    7c02:	e1 f4       	brne	.+56     	; 0x7c3c <USB_Device_ProcessControlRequest+0x80>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7c04:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <USB_ControlRequest+0x4>
    7c08:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7c0a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7c0e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7c12:	85 fb       	bst	r24, 5
    7c14:	88 27       	eor	r24, r24
    7c16:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7c18:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7c1c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c20:	97 7f       	andi	r25, 0xF7	; 247
    7c22:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7c26:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    7c2a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7c2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c32:	8e 77       	andi	r24, 0x7E	; 126
    7c34:	b1 c0       	rjmp	.+354    	; 0x7d98 <USB_Device_ProcessControlRequest+0x1dc>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7c36:	82 30       	cpi	r24, 0x02	; 2
    7c38:	09 f4       	brne	.+2      	; 0x7c3c <USB_Device_ProcessControlRequest+0x80>
    7c3a:	92 c0       	rjmp	.+292    	; 0x7d60 <USB_Device_ProcessControlRequest+0x1a4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7c40:	83 ff       	sbrs	r24, 3
    7c42:	0a c0       	rjmp	.+20     	; 0x7c58 <USB_Device_ProcessControlRequest+0x9c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7c44:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7c48:	80 62       	ori	r24, 0x20	; 32
    7c4a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7c4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c52:	87 7f       	andi	r24, 0xF7	; 247
    7c54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    7c58:	0f 90       	pop	r0
    7c5a:	0f 90       	pop	r0
    7c5c:	df 91       	pop	r29
    7c5e:	cf 91       	pop	r28
    7c60:	1f 91       	pop	r17
    7c62:	0f 91       	pop	r16
    7c64:	08 95       	ret
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7c66:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7c6a:	90 61       	ori	r25, 0x10	; 16
    7c6c:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    7c70:	21 e0       	ldi	r18, 0x01	; 1
    7c72:	30 e0       	ldi	r19, 0x00	; 0
    7c74:	01 c0       	rjmp	.+2      	; 0x7c78 <USB_Device_ProcessControlRequest+0xbc>
    7c76:	22 0f       	add	r18, r18
    7c78:	8a 95       	dec	r24
    7c7a:	ea f7       	brpl	.-6      	; 0x7c76 <USB_Device_ProcessControlRequest+0xba>
    7c7c:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    7c80:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7c84:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7c88:	88 60       	ori	r24, 0x08	; 8
    7c8a:	7f c0       	rjmp	.+254    	; 0x7d8a <USB_Device_ProcessControlRequest+0x1ce>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7c8c:	81 11       	cpse	r24, r1
    7c8e:	d6 cf       	rjmp	.-84     	; 0x7c3c <USB_Device_ProcessControlRequest+0x80>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    7c90:	10 91 cd 01 	lds	r17, 0x01CD	; 0x8001cd <USB_ControlRequest+0x2>
    7c94:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7c96:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    7c98:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7c9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c9e:	87 7f       	andi	r24, 0xF7	; 247
    7ca0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7ca4:	e1 dd       	rcall	.-1086   	; 0x7868 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7ca6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    7caa:	80 ff       	sbrs	r24, 0
    7cac:	fc cf       	rjmp	.-8      	; 0x7ca6 <USB_Device_ProcessControlRequest+0xea>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7cae:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    7cb2:	80 78       	andi	r24, 0x80	; 128
    7cb4:	81 2b       	or	r24, r17

				UDADDR = Temp;
    7cb6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UDADDR = Temp | (1 << ADDEN);
    7cba:	80 68       	ori	r24, 0x80	; 128
    7cbc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7cc0:	82 e0       	ldi	r24, 0x02	; 2
    7cc2:	11 11       	cpse	r17, r1
    7cc4:	83 e0       	ldi	r24, 0x03	; 3
    7cc6:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    7cc8:	0f bf       	out	0x3f, r16	; 63
	
	SetGlobalInterruptMask(CurrentGlobalInt);
}
    7cca:	b8 cf       	rjmp	.-144    	; 0x7c3c <USB_Device_ProcessControlRequest+0x80>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7ccc:	80 58       	subi	r24, 0x80	; 128
    7cce:	82 30       	cpi	r24, 0x02	; 2
    7cd0:	08 f0       	brcs	.+2      	; 0x7cd4 <USB_Device_ProcessControlRequest+0x118>
    7cd2:	b4 cf       	rjmp	.-152    	; 0x7c3c <USB_Device_ProcessControlRequest+0x80>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7cd4:	ae 01       	movw	r20, r28
    7cd6:	4f 5f       	subi	r20, 0xFF	; 255
    7cd8:	5f 4f       	sbci	r21, 0xFF	; 255
    7cda:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <USB_ControlRequest+0x4>
    7cde:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <USB_ControlRequest+0x2>
    7ce2:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <USB_ControlRequest+0x3>
    7ce6:	7b dd       	rcall	.-1290   	; 0x77de <CALLBACK_USB_GetDescriptor>
    7ce8:	bc 01       	movw	r22, r24
    7cea:	89 2b       	or	r24, r25
    7cec:	09 f4       	brne	.+2      	; 0x7cf0 <USB_Device_ProcessControlRequest+0x134>
    7cee:	a6 cf       	rjmp	.-180    	; 0x7c3c <USB_Device_ProcessControlRequest+0x80>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7cf0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7cf4:	87 7f       	andi	r24, 0xF7	; 247
    7cf6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7cfa:	89 81       	ldd	r24, Y+1	; 0x01
    7cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    7cfe:	d5 de       	rcall	.-598    	; 0x7aaa <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7d00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d04:	8b 77       	andi	r24, 0x7B	; 123
    7d06:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d0a:	98 cf       	rjmp	.-208    	; 0x7c3c <USB_Device_ProcessControlRequest+0x80>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7d0c:	80 38       	cpi	r24, 0x80	; 128
    7d0e:	09 f0       	breq	.+2      	; 0x7d12 <USB_Device_ProcessControlRequest+0x156>
    7d10:	95 cf       	rjmp	.-214    	; 0x7c3c <USB_Device_ProcessControlRequest+0x80>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d12:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d16:	87 7f       	andi	r24, 0xF7	; 247
    7d18:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7d1c:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7d20:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7d24:	84 cf       	rjmp	.-248    	; 0x7c2e <USB_Device_ProcessControlRequest+0x72>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7d26:	81 11       	cpse	r24, r1
    7d28:	89 cf       	rjmp	.-238    	; 0x7c3c <USB_Device_ProcessControlRequest+0x80>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7d2a:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <USB_ControlRequest+0x2>
    7d2e:	92 30       	cpi	r25, 0x02	; 2
    7d30:	08 f0       	brcs	.+2      	; 0x7d34 <USB_Device_ProcessControlRequest+0x178>
    7d32:	84 cf       	rjmp	.-248    	; 0x7c3c <USB_Device_ProcessControlRequest+0x80>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7d38:	87 7f       	andi	r24, 0xF7	; 247
    7d3a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7d3e:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    7d42:	92 dd       	rcall	.-1244   	; 0x7868 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    7d44:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <USB_Device_ConfigurationNumber>
    7d48:	88 23       	and	r24, r24
    7d4a:	11 f0       	breq	.+4      	; 0x7d50 <USB_Device_ProcessControlRequest+0x194>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7d4c:	84 e0       	ldi	r24, 0x04	; 4
    7d4e:	05 c0       	rjmp	.+10     	; 0x7d5a <USB_Device_ProcessControlRequest+0x19e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7d50:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    7d54:	87 fd       	sbrc	r24, 7
    7d56:	fa cf       	rjmp	.-12     	; 0x7d4c <USB_Device_ProcessControlRequest+0x190>
    7d58:	81 e0       	ldi	r24, 0x01	; 1

	EVENT_USB_Device_ConfigurationChanged();
    7d5a:	8e bb       	out	0x1e, r24	; 30
    7d5c:	91 da       	rcall	.-2782   	; 0x7280 <EVENT_USB_Device_ConfigurationChanged>
    7d5e:	6e cf       	rjmp	.-292    	; 0x7c3c <USB_Device_ProcessControlRequest+0x80>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7d60:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <USB_ControlRequest+0x2>
    7d64:	81 11       	cpse	r24, r1
    7d66:	13 c0       	rjmp	.+38     	; 0x7d8e <USB_Device_ProcessControlRequest+0x1d2>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7d68:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <USB_ControlRequest+0x4>
    7d6c:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7d6e:	09 f4       	brne	.+2      	; 0x7d72 <USB_Device_ProcessControlRequest+0x1b6>
    7d70:	65 cf       	rjmp	.-310    	; 0x7c3c <USB_Device_ProcessControlRequest+0x80>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d72:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7d76:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7d7a:	20 ff       	sbrs	r18, 0
    7d7c:	08 c0       	rjmp	.+16     	; 0x7d8e <USB_Device_ProcessControlRequest+0x1d2>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7d7e:	93 30       	cpi	r25, 0x03	; 3
    7d80:	09 f0       	breq	.+2      	; 0x7d84 <USB_Device_ProcessControlRequest+0x1c8>
    7d82:	71 cf       	rjmp	.-286    	; 0x7c66 <USB_Device_ProcessControlRequest+0xaa>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7d84:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7d88:	80 62       	ori	r24, 0x20	; 32

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7d8a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d8e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7d96:	87 7f       	andi	r24, 0xF7	; 247
    7d98:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7d9c:	65 dd       	rcall	.-1334   	; 0x7868 <Endpoint_ClearStatusStage>
}
    7d9e:	4e cf       	rjmp	.-356    	; 0x7c3c <USB_Device_ProcessControlRequest+0x80>

00007da0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    7da0:	08 95       	ret

00007da2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7da2:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7da4:	8e b3       	in	r24, 0x1e	; 30
    7da6:	88 23       	and	r24, r24
    7da8:	59 f0       	breq	.+22     	; 0x7dc0 <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7daa:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7dae:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7db0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7db4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    7db8:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    7dba:	00 df       	rcall	.-512    	; 0x7bbc <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7dbc:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    7dc0:	cf 91       	pop	r28
    7dc2:	08 95       	ret

00007dc4 <__tablejump2__>:
    7dc4:	ee 0f       	add	r30, r30

00007dc6 <.Loc.1>:
    7dc6:	ff 1f       	adc	r31, r31

00007dc8 <.Loc.2>:
    7dc8:	05 90       	lpm	r0, Z+

00007dca <.Loc.3>:
    7dca:	f4 91       	lpm	r31, Z

00007dcc <.Loc.4>:
    7dcc:	e0 2d       	mov	r30, r0

00007dce <.Loc.5>:
    7dce:	09 94       	ijmp

00007dd0 <eeprom_read_byte>:
    7dd0:	f9 99       	sbic	0x1f, 1	; 31
    7dd2:	fe cf       	rjmp	.-4      	; 0x7dd0 <eeprom_read_byte>
    7dd4:	92 bd       	out	0x22, r25	; 34
    7dd6:	81 bd       	out	0x21, r24	; 33
    7dd8:	f8 9a       	sbi	0x1f, 0	; 31
    7dda:	99 27       	eor	r25, r25
    7ddc:	80 b5       	in	r24, 0x20	; 32
    7dde:	08 95       	ret

00007de0 <eeprom_write_byte>:
    7de0:	26 2f       	mov	r18, r22

00007de2 <eeprom_write_r18>:
    7de2:	f9 99       	sbic	0x1f, 1	; 31
    7de4:	fe cf       	rjmp	.-4      	; 0x7de2 <eeprom_write_r18>
    7de6:	1f ba       	out	0x1f, r1	; 31
    7de8:	92 bd       	out	0x22, r25	; 34
    7dea:	81 bd       	out	0x21, r24	; 33
    7dec:	20 bd       	out	0x20, r18	; 32
    7dee:	0f b6       	in	r0, 0x3f	; 63
    7df0:	f8 94       	cli
    7df2:	fa 9a       	sbi	0x1f, 2	; 31
    7df4:	f9 9a       	sbi	0x1f, 1	; 31
    7df6:	0f be       	out	0x3f, r0	; 63
    7df8:	01 96       	adiw	r24, 0x01	; 1
    7dfa:	08 95       	ret

00007dfc <_exit>:
    7dfc:	f8 94       	cli

00007dfe <__stop_program>:
    7dfe:	ff cf       	rjmp	.-2      	; 0x7dfe <__stop_program>

00007e00 <L0>:
    7e00:	be 39       	cpi	r27, 0x9E	; 158
    7e02:	36 3a       	cpi	r19, 0xA6	; 166
    7e04:	03 3b       	cpi	r16, 0xB3	; 179
    7e06:	47 3b       	cpi	r20, 0xB7	; 183
    7e08:	44 3a       	cpi	r20, 0xA4	; 164
    7e0a:	24 3a       	cpi	r18, 0xA4	; 164
    7e0c:	44 3a       	cpi	r20, 0xA4	; 164
    7e0e:	44 3a       	cpi	r20, 0xA4	; 164
    7e10:	44 3a       	cpi	r20, 0xA4	; 164
    7e12:	44 3a       	cpi	r20, 0xA4	; 164
    7e14:	44 3a       	cpi	r20, 0xA4	; 164
    7e16:	a8 39       	cpi	r26, 0x98	; 152
    7e18:	44 3a       	cpi	r20, 0xA4	; 164
    7e1a:	28 3a       	cpi	r18, 0xA8	; 168
    7e1c:	44 3a       	cpi	r20, 0xA4	; 164
    7e1e:	a8 39       	cpi	r26, 0x98	; 152
    7e20:	2c 3a       	cpi	r18, 0xAC	; 172
    7e22:	3d 3b       	cpi	r19, 0xBD	; 189
    7e24:	da 39       	cpi	r29, 0x9A	; 154
    7e26:	b6 39       	cpi	r27, 0x96	; 150
    7e28:	44 3a       	cpi	r20, 0xA4	; 164
    7e2a:	fc 39       	cpi	r31, 0x9C	; 156
    7e2c:	44 3a       	cpi	r20, 0xA4	; 164
    7e2e:	44 3a       	cpi	r20, 0xA4	; 164
    7e30:	44 3a       	cpi	r20, 0xA4	; 164
    7e32:	44 3a       	cpi	r20, 0xA4	; 164
    7e34:	44 3a       	cpi	r20, 0xA4	; 164
    7e36:	44 3a       	cpi	r20, 0xA4	; 164
    7e38:	44 3a       	cpi	r20, 0xA4	; 164
    7e3a:	44 3a       	cpi	r20, 0xA4	; 164
    7e3c:	44 3a       	cpi	r20, 0xA4	; 164
    7e3e:	44 3a       	cpi	r20, 0xA4	; 164
    7e40:	bc 39       	cpi	r27, 0x9C	; 156
    7e42:	30 3a       	cpi	r19, 0xA0	; 160
    7e44:	11 3b       	cpi	r17, 0xB1	; 177
    7e46:	62 3b       	cpi	r22, 0xB2	; 178
    7e48:	06 3a       	cpi	r16, 0xA6	; 166
    7e4a:	44 3a       	cpi	r20, 0xA4	; 164
    7e4c:	36 3a       	cpi	r19, 0xA6	; 166
    7e4e:	44 3a       	cpi	r20, 0xA4	; 164
    7e50:	44 3a       	cpi	r20, 0xA4	; 164
    7e52:	44 3a       	cpi	r20, 0xA4	; 164
    7e54:	44 3a       	cpi	r20, 0xA4	; 164
    7e56:	44 3a       	cpi	r20, 0xA4	; 164
    7e58:	31 3b       	cpi	r19, 0xB1	; 177
    7e5a:	44 3a       	cpi	r20, 0xA4	; 164
    7e5c:	44 3a       	cpi	r20, 0xA4	; 164
    7e5e:	d8 39       	cpi	r29, 0x98	; 152
    7e60:	44 3a       	cpi	r20, 0xA4	; 164
    7e62:	1d 3a       	cpi	r17, 0xAD	; 173
    7e64:	00 3a       	cpi	r16, 0xA0	; 160
    7e66:	b8 39       	cpi	r27, 0x98	; 152
    7e68:	00 3e       	cpi	r16, 0xE0	; 224
    7e6a:	1b 3e       	cpi	r17, 0xEB	; 235
    7e6c:	1e 3e       	cpi	r17, 0xEE	; 238
    7e6e:	1b 3e       	cpi	r17, 0xEB	; 235
    7e70:	1e 3e       	cpi	r17, 0xEE	; 238
    7e72:	46 3e       	cpi	r20, 0xE6	; 230
    7e74:	66 3e       	cpi	r22, 0xE6	; 230
    7e76:	1e 3e       	cpi	r17, 0xEE	; 238
    7e78:	86 3e       	cpi	r24, 0xE6	; 230
    7e7a:	93 3e       	cpi	r25, 0xE3	; 227
